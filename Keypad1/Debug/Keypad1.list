
Keypad1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f14  08000f14  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f14  08000f14  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f14  08000f14  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f14  08000f14  00010f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f78  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f78  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000949  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000032e  00000000  00000000  00020a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00020d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bf  00000000  00000000  00020e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c71  00000000  00000000  00020f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001506  00000000  00000000  00023b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096e0  00000000  00000000  0002508e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009cc  00000000  00000000  0002e770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0002f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ebc 	.word	0x08000ebc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000ebc 	.word	0x08000ebc

08000170 <delay>:
#include <stdint.h>
#include <stdio.h>

void delay(){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0

	for(uint32_t i = 0; i <= 300000; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>

}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	000493e0 	.word	0x000493e0

0800019c <main>:


int main(){
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0

	uint32_t volatile *pClkCtrlReg = (uint32_t*) 0x40021018;
 80001a2:	4b85      	ldr	r3, [pc, #532]	; (80003b8 <main+0x21c>)
 80001a4:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *pPortAOutReg = (uint32_t*) 0x4001080C;
 80001a6:	4b85      	ldr	r3, [pc, #532]	; (80003bc <main+0x220>)
 80001a8:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *pPortAInReg = (uint32_t*) 0x40010808;
 80001aa:	4b85      	ldr	r3, [pc, #532]	; (80003c0 <main+0x224>)
 80001ac:	607b      	str	r3, [r7, #4]
	uint32_t volatile *pPortAModeReg = (uint32_t*) 0x40010800;
 80001ae:	4b85      	ldr	r3, [pc, #532]	; (80003c4 <main+0x228>)
 80001b0:	603b      	str	r3, [r7, #0]

	//Enable the clock register.
	*pClkCtrlReg |= (1 << 2);
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	f043 0204 	orr.w	r2, r3, #4
 80001ba:	68fb      	ldr	r3, [r7, #12]
 80001bc:	601a      	str	r2, [r3, #0]

	//PA0-PA1-PA2-PA3 pins are should be in output mode.(ROWS)
	*pPortAModeReg &= ~(0xFFFF);
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	0c1b      	lsrs	r3, r3, #16
 80001c4:	041b      	lsls	r3, r3, #16
 80001c6:	683a      	ldr	r2, [r7, #0]
 80001c8:	6013      	str	r3, [r2, #0]
	*pPortAModeReg |= 0x3333;
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 80001d2:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 80001d6:	683a      	ldr	r2, [r7, #0]
 80001d8:	6013      	str	r3, [r2, #0]
	//PA4-PA5-PA6-PA7 pins are should be in input mode.(COLUMNS)
	*pPortAModeReg &= ~(0xFFFF << 16);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	b29a      	uxth	r2, r3
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	601a      	str	r2, [r3, #0]
	*pPortAModeReg |= (0x8888 << 16);
 80001e4:	683b      	ldr	r3, [r7, #0]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f043 4308 	orr.w	r3, r3, #2281701376	; 0x88000000
 80001ec:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	6013      	str	r3, [r2, #0]

	while(1){

		//Make all row GPIOs HIGH STATE
		*pPortAOutReg |= (15 << 0);
 80001f4:	68bb      	ldr	r3, [r7, #8]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f043 020f 	orr.w	r2, r3, #15
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	601a      	str	r2, [r3, #0]
		//Make R1(PA0) Low.
		*pPortAOutReg &= ~(1 << 0);
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f023 0201 	bic.w	r2, r3, #1
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	601a      	str	r2, [r3, #0]

		//scan the columns
		//Check C1(PA4) low or high
		if(!(*pPortAInReg & (1 << 4))){
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	f003 0310 	and.w	r3, r3, #16
 8000214:	2b00      	cmp	r3, #0
 8000216:	d104      	bne.n	8000222 <main+0x86>
			//key is pressed.
			delay();
 8000218:	f7ff ffaa 	bl	8000170 <delay>
			printf("1\n");
 800021c:	486a      	ldr	r0, [pc, #424]	; (80003c8 <main+0x22c>)
 800021e:	f000 fac1 	bl	80007a4 <puts>
		}

		//Check C2(PA5) low or high
		if(!(*pPortAInReg & (1 << 5))){
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f003 0320 	and.w	r3, r3, #32
 800022a:	2b00      	cmp	r3, #0
 800022c:	d104      	bne.n	8000238 <main+0x9c>
			//key is pressed.
			delay();
 800022e:	f7ff ff9f 	bl	8000170 <delay>
			printf("2\n");
 8000232:	4866      	ldr	r0, [pc, #408]	; (80003cc <main+0x230>)
 8000234:	f000 fab6 	bl	80007a4 <puts>
		}

		//Check C3(PA6) low or high
		if(!(*pPortAInReg & (1 << 6))){
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000240:	2b00      	cmp	r3, #0
 8000242:	d104      	bne.n	800024e <main+0xb2>
			//key is pressed.
			delay();
 8000244:	f7ff ff94 	bl	8000170 <delay>
			printf("3\n");
 8000248:	4861      	ldr	r0, [pc, #388]	; (80003d0 <main+0x234>)
 800024a:	f000 faab 	bl	80007a4 <puts>
		}

		//Check C4(PA7) low or high
		if(!(*pPortAInReg & (1 << 7))){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000256:	2b00      	cmp	r3, #0
 8000258:	d104      	bne.n	8000264 <main+0xc8>
			//key is pressed.
			delay();
 800025a:	f7ff ff89 	bl	8000170 <delay>
			printf("A\n");
 800025e:	485d      	ldr	r0, [pc, #372]	; (80003d4 <main+0x238>)
 8000260:	f000 faa0 	bl	80007a4 <puts>
		}


		//Make R2(PA1) Low.
		*pPortAOutReg |= (15 << 0); //And be sure other rows are high.
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f043 020f 	orr.w	r2, r3, #15
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	601a      	str	r2, [r3, #0]
		*pPortAOutReg &= ~(1 << 1);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f023 0202 	bic.w	r2, r3, #2
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	601a      	str	r2, [r3, #0]

		//Check C1(PA4) low or high
		if(!(*pPortAInReg & (1 << 4))){
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f003 0310 	and.w	r3, r3, #16
 8000284:	2b00      	cmp	r3, #0
 8000286:	d104      	bne.n	8000292 <main+0xf6>
			//key is pressed.
			delay();
 8000288:	f7ff ff72 	bl	8000170 <delay>
			printf("4\n");
 800028c:	4852      	ldr	r0, [pc, #328]	; (80003d8 <main+0x23c>)
 800028e:	f000 fa89 	bl	80007a4 <puts>
		}

		//Check C2(PA5) low or high
		if(!(*pPortAInReg & (1 << 5))){
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f003 0320 	and.w	r3, r3, #32
 800029a:	2b00      	cmp	r3, #0
 800029c:	d104      	bne.n	80002a8 <main+0x10c>
			//key is pressed.
			delay();
 800029e:	f7ff ff67 	bl	8000170 <delay>
			printf("5\n");
 80002a2:	484e      	ldr	r0, [pc, #312]	; (80003dc <main+0x240>)
 80002a4:	f000 fa7e 	bl	80007a4 <puts>
		}

		//Check C3(PA6) low or high
		if(!(*pPortAInReg & (1 << 6))){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d104      	bne.n	80002be <main+0x122>
			//key is pressed.
			delay();
 80002b4:	f7ff ff5c 	bl	8000170 <delay>
			printf("6\n");
 80002b8:	4849      	ldr	r0, [pc, #292]	; (80003e0 <main+0x244>)
 80002ba:	f000 fa73 	bl	80007a4 <puts>
		}

		//Check C4(PA7) low or high
		if(!(*pPortAInReg & (1 << 7))){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d104      	bne.n	80002d4 <main+0x138>
			//key is pressed.
			delay();
 80002ca:	f7ff ff51 	bl	8000170 <delay>
			printf("B\n");
 80002ce:	4845      	ldr	r0, [pc, #276]	; (80003e4 <main+0x248>)
 80002d0:	f000 fa68 	bl	80007a4 <puts>
		}

		//Make R3(PA2) Low.
		*pPortAOutReg |= (15 << 0); //And be sure other rows are high.
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f043 020f 	orr.w	r2, r3, #15
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	601a      	str	r2, [r3, #0]
		*pPortAOutReg &= ~(1 << 2);
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f023 0204 	bic.w	r2, r3, #4
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	601a      	str	r2, [r3, #0]

		//Check C1(PA4) low or high
		if(!(*pPortAInReg & (1 << 4))){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0310 	and.w	r3, r3, #16
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d104      	bne.n	8000302 <main+0x166>
			//key is pressed.
			delay();
 80002f8:	f7ff ff3a 	bl	8000170 <delay>
			printf("7\n");
 80002fc:	483a      	ldr	r0, [pc, #232]	; (80003e8 <main+0x24c>)
 80002fe:	f000 fa51 	bl	80007a4 <puts>
		}

		//Check C2(PA5) low or high
		if(!(*pPortAInReg & (1 << 5))){
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f003 0320 	and.w	r3, r3, #32
 800030a:	2b00      	cmp	r3, #0
 800030c:	d104      	bne.n	8000318 <main+0x17c>
			//key is pressed.
			delay();
 800030e:	f7ff ff2f 	bl	8000170 <delay>
			printf("8\n");
 8000312:	4836      	ldr	r0, [pc, #216]	; (80003ec <main+0x250>)
 8000314:	f000 fa46 	bl	80007a4 <puts>
		}

		//Check C3(PA6) low or high
		if(!(*pPortAInReg & (1 << 6))){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000320:	2b00      	cmp	r3, #0
 8000322:	d104      	bne.n	800032e <main+0x192>
			//key is pressed.
			delay();
 8000324:	f7ff ff24 	bl	8000170 <delay>
			printf("9\n");
 8000328:	4831      	ldr	r0, [pc, #196]	; (80003f0 <main+0x254>)
 800032a:	f000 fa3b 	bl	80007a4 <puts>
		}

		//Check C4(PA7) low or high
		if(!(*pPortAInReg & (1 << 7))){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000336:	2b00      	cmp	r3, #0
 8000338:	d104      	bne.n	8000344 <main+0x1a8>
			//key is pressed.
			delay();
 800033a:	f7ff ff19 	bl	8000170 <delay>
			printf("C\n");
 800033e:	482d      	ldr	r0, [pc, #180]	; (80003f4 <main+0x258>)
 8000340:	f000 fa30 	bl	80007a4 <puts>
		}

		//Make R4(PA3) Low.
		*pPortAOutReg |= (15 << 0); //And be sure other rows are high.
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f043 020f 	orr.w	r2, r3, #15
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	601a      	str	r2, [r3, #0]
		*pPortAOutReg &= ~(1 << 3);
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f023 0208 	bic.w	r2, r3, #8
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	601a      	str	r2, [r3, #0]

		//Check C1(PA4) low or high
		if(!(*pPortAInReg & (1 << 4))){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	2b00      	cmp	r3, #0
 8000366:	d104      	bne.n	8000372 <main+0x1d6>
			//key is pressed.
			delay();
 8000368:	f7ff ff02 	bl	8000170 <delay>
			printf("*\n");
 800036c:	4822      	ldr	r0, [pc, #136]	; (80003f8 <main+0x25c>)
 800036e:	f000 fa19 	bl	80007a4 <puts>
		}

		//Check C2(PA5) low or high
		if(!(*pPortAInReg & (1 << 5))){
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f003 0320 	and.w	r3, r3, #32
 800037a:	2b00      	cmp	r3, #0
 800037c:	d104      	bne.n	8000388 <main+0x1ec>
			//key is pressed.
			delay();
 800037e:	f7ff fef7 	bl	8000170 <delay>
			printf("0\n");
 8000382:	481e      	ldr	r0, [pc, #120]	; (80003fc <main+0x260>)
 8000384:	f000 fa0e 	bl	80007a4 <puts>
		}

		//Check C3(PA6) low or high
		if(!(*pPortAInReg & (1 << 6))){
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000390:	2b00      	cmp	r3, #0
 8000392:	d104      	bne.n	800039e <main+0x202>
			//key is pressed.
			delay();
 8000394:	f7ff feec 	bl	8000170 <delay>
			printf("#\n");
 8000398:	4819      	ldr	r0, [pc, #100]	; (8000400 <main+0x264>)
 800039a:	f000 fa03 	bl	80007a4 <puts>
		}

		//Check C4(PA7) low or high
		if(!(*pPortAInReg & (1 << 7))){
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	f47f af24 	bne.w	80001f4 <main+0x58>
			//key is pressed.
			delay();
 80003ac:	f7ff fee0 	bl	8000170 <delay>
			printf("D\n");
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <main+0x268>)
 80003b2:	f000 f9f7 	bl	80007a4 <puts>
		*pPortAOutReg |= (15 << 0);
 80003b6:	e71d      	b.n	80001f4 <main+0x58>
 80003b8:	40021018 	.word	0x40021018
 80003bc:	4001080c 	.word	0x4001080c
 80003c0:	40010808 	.word	0x40010808
 80003c4:	40010800 	.word	0x40010800
 80003c8:	08000ed4 	.word	0x08000ed4
 80003cc:	08000ed8 	.word	0x08000ed8
 80003d0:	08000edc 	.word	0x08000edc
 80003d4:	08000ee0 	.word	0x08000ee0
 80003d8:	08000ee4 	.word	0x08000ee4
 80003dc:	08000ee8 	.word	0x08000ee8
 80003e0:	08000eec 	.word	0x08000eec
 80003e4:	08000ef0 	.word	0x08000ef0
 80003e8:	08000ef4 	.word	0x08000ef4
 80003ec:	08000ef8 	.word	0x08000ef8
 80003f0:	08000efc 	.word	0x08000efc
 80003f4:	08000f00 	.word	0x08000f00
 80003f8:	08000f04 	.word	0x08000f04
 80003fc:	08000f08 	.word	0x08000f08
 8000400:	08000f0c 	.word	0x08000f0c
 8000404:	08000f10 	.word	0x08000f10

08000408 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	60f8      	str	r0, [r7, #12]
 8000410:	60b9      	str	r1, [r7, #8]
 8000412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	e00a      	b.n	8000430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800041a:	f3af 8000 	nop.w
 800041e:	4601      	mov	r1, r0
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	1c5a      	adds	r2, r3, #1
 8000424:	60ba      	str	r2, [r7, #8]
 8000426:	b2ca      	uxtb	r2, r1
 8000428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3301      	adds	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697a      	ldr	r2, [r7, #20]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	429a      	cmp	r2, r3
 8000436:	dbf0      	blt.n	800041a <_read+0x12>
  }

  return len;
 8000438:	687b      	ldr	r3, [r7, #4]
}
 800043a:	4618      	mov	r0, r3
 800043c:	3718      	adds	r7, #24
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000442:	b580      	push	{r7, lr}
 8000444:	b086      	sub	sp, #24
 8000446:	af00      	add	r7, sp, #0
 8000448:	60f8      	str	r0, [r7, #12]
 800044a:	60b9      	str	r1, [r7, #8]
 800044c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
 8000452:	e009      	b.n	8000468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	1c5a      	adds	r2, r3, #1
 8000458:	60ba      	str	r2, [r7, #8]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbf1      	blt.n	8000454 <_write+0x12>
  }
  return len;
 8000470:	687b      	ldr	r3, [r7, #4]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <_close>:

int _close(int file)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000482:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a0:	605a      	str	r2, [r3, #4]
  return 0;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <_isatty>:

int _isatty(int file)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004ce:	2300      	movs	r3, #0
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
	...

080004dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e4:	4a14      	ldr	r2, [pc, #80]	; (8000538 <_sbrk+0x5c>)
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <_sbrk+0x60>)
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <_sbrk+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d102      	bne.n	80004fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <_sbrk+0x64>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <_sbrk+0x68>)
 80004fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	693a      	ldr	r2, [r7, #16]
 8000508:	429a      	cmp	r2, r3
 800050a:	d207      	bcs.n	800051c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800050c:	f000 fa78 	bl	8000a00 <__errno>
 8000510:	4603      	mov	r3, r0
 8000512:	220c      	movs	r2, #12
 8000514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	e009      	b.n	8000530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <_sbrk+0x64>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	4a05      	ldr	r2, [pc, #20]	; (8000540 <_sbrk+0x64>)
 800052c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052e:	68fb      	ldr	r3, [r7, #12]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3718      	adds	r7, #24
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20005000 	.word	0x20005000
 800053c:	00000400 	.word	0x00000400
 8000540:	20000078 	.word	0x20000078
 8000544:	200001c8 	.word	0x200001c8

08000548 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800054a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800054c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000550:	480c      	ldr	r0, [pc, #48]	; (8000584 <LoopForever+0x6>)
  ldr r1, =_edata
 8000552:	490d      	ldr	r1, [pc, #52]	; (8000588 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <LoopForever+0xe>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000568:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <LoopForever+0x16>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000576:	f000 fa49 	bl	8000a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057a:	f7ff fe0f 	bl	800019c <main>

0800057e <LoopForever>:

LoopForever:
  b LoopForever
 800057e:	e7fe      	b.n	800057e <LoopForever>
  ldr   r0, =_estack
 8000580:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800058c:	08000f1c 	.word	0x08000f1c
  ldr r2, =_sbss
 8000590:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000594:	200001c8 	.word	0x200001c8

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <std>:
 800059c:	2300      	movs	r3, #0
 800059e:	b510      	push	{r4, lr}
 80005a0:	4604      	mov	r4, r0
 80005a2:	e9c0 3300 	strd	r3, r3, [r0]
 80005a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005aa:	6083      	str	r3, [r0, #8]
 80005ac:	8181      	strh	r1, [r0, #12]
 80005ae:	6643      	str	r3, [r0, #100]	; 0x64
 80005b0:	81c2      	strh	r2, [r0, #14]
 80005b2:	6183      	str	r3, [r0, #24]
 80005b4:	4619      	mov	r1, r3
 80005b6:	2208      	movs	r2, #8
 80005b8:	305c      	adds	r0, #92	; 0x5c
 80005ba:	f000 f9d3 	bl	8000964 <memset>
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <std+0x38>)
 80005c0:	6224      	str	r4, [r4, #32]
 80005c2:	6263      	str	r3, [r4, #36]	; 0x24
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <std+0x3c>)
 80005c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <std+0x40>)
 80005ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <std+0x44>)
 80005ce:	6323      	str	r3, [r4, #48]	; 0x30
 80005d0:	bd10      	pop	{r4, pc}
 80005d2:	bf00      	nop
 80005d4:	080007b5 	.word	0x080007b5
 80005d8:	080007d7 	.word	0x080007d7
 80005dc:	0800080f 	.word	0x0800080f
 80005e0:	08000833 	.word	0x08000833

080005e4 <stdio_exit_handler>:
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <stdio_exit_handler+0xc>)
 80005e6:	4903      	ldr	r1, [pc, #12]	; (80005f4 <stdio_exit_handler+0x10>)
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <stdio_exit_handler+0x14>)
 80005ea:	f000 b869 	b.w	80006c0 <_fwalk_sglue>
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	08000d45 	.word	0x08000d45
 80005f8:	2000000c 	.word	0x2000000c

080005fc <cleanup_stdio>:
 80005fc:	6841      	ldr	r1, [r0, #4]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <cleanup_stdio+0x34>)
 8000600:	b510      	push	{r4, lr}
 8000602:	4299      	cmp	r1, r3
 8000604:	4604      	mov	r4, r0
 8000606:	d001      	beq.n	800060c <cleanup_stdio+0x10>
 8000608:	f000 fb9c 	bl	8000d44 <_fflush_r>
 800060c:	68a1      	ldr	r1, [r4, #8]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <cleanup_stdio+0x38>)
 8000610:	4299      	cmp	r1, r3
 8000612:	d002      	beq.n	800061a <cleanup_stdio+0x1e>
 8000614:	4620      	mov	r0, r4
 8000616:	f000 fb95 	bl	8000d44 <_fflush_r>
 800061a:	68e1      	ldr	r1, [r4, #12]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <cleanup_stdio+0x3c>)
 800061e:	4299      	cmp	r1, r3
 8000620:	d004      	beq.n	800062c <cleanup_stdio+0x30>
 8000622:	4620      	mov	r0, r4
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000628:	f000 bb8c 	b.w	8000d44 <_fflush_r>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	2000007c 	.word	0x2000007c
 8000634:	200000e4 	.word	0x200000e4
 8000638:	2000014c 	.word	0x2000014c

0800063c <global_stdio_init.part.0>:
 800063c:	b510      	push	{r4, lr}
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <global_stdio_init.part.0+0x30>)
 8000640:	4c0b      	ldr	r4, [pc, #44]	; (8000670 <global_stdio_init.part.0+0x34>)
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <global_stdio_init.part.0+0x38>)
 8000644:	4620      	mov	r0, r4
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	2104      	movs	r1, #4
 800064a:	2200      	movs	r2, #0
 800064c:	f7ff ffa6 	bl	800059c <std>
 8000650:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000654:	2201      	movs	r2, #1
 8000656:	2109      	movs	r1, #9
 8000658:	f7ff ffa0 	bl	800059c <std>
 800065c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000660:	2202      	movs	r2, #2
 8000662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000666:	2112      	movs	r1, #18
 8000668:	f7ff bf98 	b.w	800059c <std>
 800066c:	200001b4 	.word	0x200001b4
 8000670:	2000007c 	.word	0x2000007c
 8000674:	080005e5 	.word	0x080005e5

08000678 <__sfp_lock_acquire>:
 8000678:	4801      	ldr	r0, [pc, #4]	; (8000680 <__sfp_lock_acquire+0x8>)
 800067a:	f000 b9eb 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 800067e:	bf00      	nop
 8000680:	200001bd 	.word	0x200001bd

08000684 <__sfp_lock_release>:
 8000684:	4801      	ldr	r0, [pc, #4]	; (800068c <__sfp_lock_release+0x8>)
 8000686:	f000 b9e6 	b.w	8000a56 <__retarget_lock_release_recursive>
 800068a:	bf00      	nop
 800068c:	200001bd 	.word	0x200001bd

08000690 <__sinit>:
 8000690:	b510      	push	{r4, lr}
 8000692:	4604      	mov	r4, r0
 8000694:	f7ff fff0 	bl	8000678 <__sfp_lock_acquire>
 8000698:	6a23      	ldr	r3, [r4, #32]
 800069a:	b11b      	cbz	r3, 80006a4 <__sinit+0x14>
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f7ff bff0 	b.w	8000684 <__sfp_lock_release>
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__sinit+0x28>)
 80006a6:	6223      	str	r3, [r4, #32]
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <__sinit+0x2c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f5      	bne.n	800069c <__sinit+0xc>
 80006b0:	f7ff ffc4 	bl	800063c <global_stdio_init.part.0>
 80006b4:	e7f2      	b.n	800069c <__sinit+0xc>
 80006b6:	bf00      	nop
 80006b8:	080005fd 	.word	0x080005fd
 80006bc:	200001b4 	.word	0x200001b4

080006c0 <_fwalk_sglue>:
 80006c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006c4:	4607      	mov	r7, r0
 80006c6:	4688      	mov	r8, r1
 80006c8:	4614      	mov	r4, r2
 80006ca:	2600      	movs	r6, #0
 80006cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006d0:	f1b9 0901 	subs.w	r9, r9, #1
 80006d4:	d505      	bpl.n	80006e2 <_fwalk_sglue+0x22>
 80006d6:	6824      	ldr	r4, [r4, #0]
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d1f7      	bne.n	80006cc <_fwalk_sglue+0xc>
 80006dc:	4630      	mov	r0, r6
 80006de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006e2:	89ab      	ldrh	r3, [r5, #12]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d907      	bls.n	80006f8 <_fwalk_sglue+0x38>
 80006e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006ec:	3301      	adds	r3, #1
 80006ee:	d003      	beq.n	80006f8 <_fwalk_sglue+0x38>
 80006f0:	4629      	mov	r1, r5
 80006f2:	4638      	mov	r0, r7
 80006f4:	47c0      	blx	r8
 80006f6:	4306      	orrs	r6, r0
 80006f8:	3568      	adds	r5, #104	; 0x68
 80006fa:	e7e9      	b.n	80006d0 <_fwalk_sglue+0x10>

080006fc <_puts_r>:
 80006fc:	6a03      	ldr	r3, [r0, #32]
 80006fe:	b570      	push	{r4, r5, r6, lr}
 8000700:	4605      	mov	r5, r0
 8000702:	460e      	mov	r6, r1
 8000704:	6884      	ldr	r4, [r0, #8]
 8000706:	b90b      	cbnz	r3, 800070c <_puts_r+0x10>
 8000708:	f7ff ffc2 	bl	8000690 <__sinit>
 800070c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800070e:	07db      	lsls	r3, r3, #31
 8000710:	d405      	bmi.n	800071e <_puts_r+0x22>
 8000712:	89a3      	ldrh	r3, [r4, #12]
 8000714:	0598      	lsls	r0, r3, #22
 8000716:	d402      	bmi.n	800071e <_puts_r+0x22>
 8000718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800071a:	f000 f99b 	bl	8000a54 <__retarget_lock_acquire_recursive>
 800071e:	89a3      	ldrh	r3, [r4, #12]
 8000720:	0719      	lsls	r1, r3, #28
 8000722:	d513      	bpl.n	800074c <_puts_r+0x50>
 8000724:	6923      	ldr	r3, [r4, #16]
 8000726:	b18b      	cbz	r3, 800074c <_puts_r+0x50>
 8000728:	3e01      	subs	r6, #1
 800072a:	68a3      	ldr	r3, [r4, #8]
 800072c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000730:	3b01      	subs	r3, #1
 8000732:	60a3      	str	r3, [r4, #8]
 8000734:	b9e9      	cbnz	r1, 8000772 <_puts_r+0x76>
 8000736:	2b00      	cmp	r3, #0
 8000738:	da2e      	bge.n	8000798 <_puts_r+0x9c>
 800073a:	4622      	mov	r2, r4
 800073c:	210a      	movs	r1, #10
 800073e:	4628      	mov	r0, r5
 8000740:	f000 f87b 	bl	800083a <__swbuf_r>
 8000744:	3001      	adds	r0, #1
 8000746:	d007      	beq.n	8000758 <_puts_r+0x5c>
 8000748:	250a      	movs	r5, #10
 800074a:	e007      	b.n	800075c <_puts_r+0x60>
 800074c:	4621      	mov	r1, r4
 800074e:	4628      	mov	r0, r5
 8000750:	f000 f8b0 	bl	80008b4 <__swsetup_r>
 8000754:	2800      	cmp	r0, #0
 8000756:	d0e7      	beq.n	8000728 <_puts_r+0x2c>
 8000758:	f04f 35ff 	mov.w	r5, #4294967295
 800075c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800075e:	07da      	lsls	r2, r3, #31
 8000760:	d405      	bmi.n	800076e <_puts_r+0x72>
 8000762:	89a3      	ldrh	r3, [r4, #12]
 8000764:	059b      	lsls	r3, r3, #22
 8000766:	d402      	bmi.n	800076e <_puts_r+0x72>
 8000768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800076a:	f000 f974 	bl	8000a56 <__retarget_lock_release_recursive>
 800076e:	4628      	mov	r0, r5
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	2b00      	cmp	r3, #0
 8000774:	da04      	bge.n	8000780 <_puts_r+0x84>
 8000776:	69a2      	ldr	r2, [r4, #24]
 8000778:	429a      	cmp	r2, r3
 800077a:	dc06      	bgt.n	800078a <_puts_r+0x8e>
 800077c:	290a      	cmp	r1, #10
 800077e:	d004      	beq.n	800078a <_puts_r+0x8e>
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	6022      	str	r2, [r4, #0]
 8000786:	7019      	strb	r1, [r3, #0]
 8000788:	e7cf      	b.n	800072a <_puts_r+0x2e>
 800078a:	4622      	mov	r2, r4
 800078c:	4628      	mov	r0, r5
 800078e:	f000 f854 	bl	800083a <__swbuf_r>
 8000792:	3001      	adds	r0, #1
 8000794:	d1c9      	bne.n	800072a <_puts_r+0x2e>
 8000796:	e7df      	b.n	8000758 <_puts_r+0x5c>
 8000798:	250a      	movs	r5, #10
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	6022      	str	r2, [r4, #0]
 80007a0:	701d      	strb	r5, [r3, #0]
 80007a2:	e7db      	b.n	800075c <_puts_r+0x60>

080007a4 <puts>:
 80007a4:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <puts+0xc>)
 80007a6:	4601      	mov	r1, r0
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	f7ff bfa7 	b.w	80006fc <_puts_r>
 80007ae:	bf00      	nop
 80007b0:	20000058 	.word	0x20000058

080007b4 <__sread>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	460c      	mov	r4, r1
 80007b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007bc:	f000 f8fc 	bl	80009b8 <_read_r>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	bfab      	itete	ge
 80007c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80007c6:	89a3      	ldrhlt	r3, [r4, #12]
 80007c8:	181b      	addge	r3, r3, r0
 80007ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80007ce:	bfac      	ite	ge
 80007d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80007d2:	81a3      	strhlt	r3, [r4, #12]
 80007d4:	bd10      	pop	{r4, pc}

080007d6 <__swrite>:
 80007d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007da:	461f      	mov	r7, r3
 80007dc:	898b      	ldrh	r3, [r1, #12]
 80007de:	4605      	mov	r5, r0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	460c      	mov	r4, r1
 80007e4:	4616      	mov	r6, r2
 80007e6:	d505      	bpl.n	80007f4 <__swrite+0x1e>
 80007e8:	2302      	movs	r3, #2
 80007ea:	2200      	movs	r2, #0
 80007ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007f0:	f000 f8d0 	bl	8000994 <_lseek_r>
 80007f4:	89a3      	ldrh	r3, [r4, #12]
 80007f6:	4632      	mov	r2, r6
 80007f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80007fc:	81a3      	strh	r3, [r4, #12]
 80007fe:	4628      	mov	r0, r5
 8000800:	463b      	mov	r3, r7
 8000802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800080a:	f000 b8e7 	b.w	80009dc <_write_r>

0800080e <__sseek>:
 800080e:	b510      	push	{r4, lr}
 8000810:	460c      	mov	r4, r1
 8000812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000816:	f000 f8bd 	bl	8000994 <_lseek_r>
 800081a:	1c43      	adds	r3, r0, #1
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	bf15      	itete	ne
 8000820:	6560      	strne	r0, [r4, #84]	; 0x54
 8000822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800082a:	81a3      	strheq	r3, [r4, #12]
 800082c:	bf18      	it	ne
 800082e:	81a3      	strhne	r3, [r4, #12]
 8000830:	bd10      	pop	{r4, pc}

08000832 <__sclose>:
 8000832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000836:	f000 b89d 	b.w	8000974 <_close_r>

0800083a <__swbuf_r>:
 800083a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083c:	460e      	mov	r6, r1
 800083e:	4614      	mov	r4, r2
 8000840:	4605      	mov	r5, r0
 8000842:	b118      	cbz	r0, 800084c <__swbuf_r+0x12>
 8000844:	6a03      	ldr	r3, [r0, #32]
 8000846:	b90b      	cbnz	r3, 800084c <__swbuf_r+0x12>
 8000848:	f7ff ff22 	bl	8000690 <__sinit>
 800084c:	69a3      	ldr	r3, [r4, #24]
 800084e:	60a3      	str	r3, [r4, #8]
 8000850:	89a3      	ldrh	r3, [r4, #12]
 8000852:	071a      	lsls	r2, r3, #28
 8000854:	d525      	bpl.n	80008a2 <__swbuf_r+0x68>
 8000856:	6923      	ldr	r3, [r4, #16]
 8000858:	b31b      	cbz	r3, 80008a2 <__swbuf_r+0x68>
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	6922      	ldr	r2, [r4, #16]
 800085e:	b2f6      	uxtb	r6, r6
 8000860:	1a98      	subs	r0, r3, r2
 8000862:	6963      	ldr	r3, [r4, #20]
 8000864:	4637      	mov	r7, r6
 8000866:	4283      	cmp	r3, r0
 8000868:	dc04      	bgt.n	8000874 <__swbuf_r+0x3a>
 800086a:	4621      	mov	r1, r4
 800086c:	4628      	mov	r0, r5
 800086e:	f000 fa69 	bl	8000d44 <_fflush_r>
 8000872:	b9e0      	cbnz	r0, 80008ae <__swbuf_r+0x74>
 8000874:	68a3      	ldr	r3, [r4, #8]
 8000876:	3b01      	subs	r3, #1
 8000878:	60a3      	str	r3, [r4, #8]
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	1c5a      	adds	r2, r3, #1
 800087e:	6022      	str	r2, [r4, #0]
 8000880:	701e      	strb	r6, [r3, #0]
 8000882:	6962      	ldr	r2, [r4, #20]
 8000884:	1c43      	adds	r3, r0, #1
 8000886:	429a      	cmp	r2, r3
 8000888:	d004      	beq.n	8000894 <__swbuf_r+0x5a>
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	07db      	lsls	r3, r3, #31
 800088e:	d506      	bpl.n	800089e <__swbuf_r+0x64>
 8000890:	2e0a      	cmp	r6, #10
 8000892:	d104      	bne.n	800089e <__swbuf_r+0x64>
 8000894:	4621      	mov	r1, r4
 8000896:	4628      	mov	r0, r5
 8000898:	f000 fa54 	bl	8000d44 <_fflush_r>
 800089c:	b938      	cbnz	r0, 80008ae <__swbuf_r+0x74>
 800089e:	4638      	mov	r0, r7
 80008a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a2:	4621      	mov	r1, r4
 80008a4:	4628      	mov	r0, r5
 80008a6:	f000 f805 	bl	80008b4 <__swsetup_r>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d0d5      	beq.n	800085a <__swbuf_r+0x20>
 80008ae:	f04f 37ff 	mov.w	r7, #4294967295
 80008b2:	e7f4      	b.n	800089e <__swbuf_r+0x64>

080008b4 <__swsetup_r>:
 80008b4:	b538      	push	{r3, r4, r5, lr}
 80008b6:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <__swsetup_r+0xac>)
 80008b8:	4605      	mov	r5, r0
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	460c      	mov	r4, r1
 80008be:	b118      	cbz	r0, 80008c8 <__swsetup_r+0x14>
 80008c0:	6a03      	ldr	r3, [r0, #32]
 80008c2:	b90b      	cbnz	r3, 80008c8 <__swsetup_r+0x14>
 80008c4:	f7ff fee4 	bl	8000690 <__sinit>
 80008c8:	89a3      	ldrh	r3, [r4, #12]
 80008ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008ce:	0718      	lsls	r0, r3, #28
 80008d0:	d422      	bmi.n	8000918 <__swsetup_r+0x64>
 80008d2:	06d9      	lsls	r1, r3, #27
 80008d4:	d407      	bmi.n	80008e6 <__swsetup_r+0x32>
 80008d6:	2309      	movs	r3, #9
 80008d8:	602b      	str	r3, [r5, #0]
 80008da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80008de:	f04f 30ff 	mov.w	r0, #4294967295
 80008e2:	81a3      	strh	r3, [r4, #12]
 80008e4:	e034      	b.n	8000950 <__swsetup_r+0x9c>
 80008e6:	0758      	lsls	r0, r3, #29
 80008e8:	d512      	bpl.n	8000910 <__swsetup_r+0x5c>
 80008ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008ec:	b141      	cbz	r1, 8000900 <__swsetup_r+0x4c>
 80008ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008f2:	4299      	cmp	r1, r3
 80008f4:	d002      	beq.n	80008fc <__swsetup_r+0x48>
 80008f6:	4628      	mov	r0, r5
 80008f8:	f000 f8ae 	bl	8000a58 <_free_r>
 80008fc:	2300      	movs	r3, #0
 80008fe:	6363      	str	r3, [r4, #52]	; 0x34
 8000900:	89a3      	ldrh	r3, [r4, #12]
 8000902:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000906:	81a3      	strh	r3, [r4, #12]
 8000908:	2300      	movs	r3, #0
 800090a:	6063      	str	r3, [r4, #4]
 800090c:	6923      	ldr	r3, [r4, #16]
 800090e:	6023      	str	r3, [r4, #0]
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	81a3      	strh	r3, [r4, #12]
 8000918:	6923      	ldr	r3, [r4, #16]
 800091a:	b94b      	cbnz	r3, 8000930 <__swsetup_r+0x7c>
 800091c:	89a3      	ldrh	r3, [r4, #12]
 800091e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000926:	d003      	beq.n	8000930 <__swsetup_r+0x7c>
 8000928:	4621      	mov	r1, r4
 800092a:	4628      	mov	r0, r5
 800092c:	f000 fa57 	bl	8000dde <__smakebuf_r>
 8000930:	89a0      	ldrh	r0, [r4, #12]
 8000932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000936:	f010 0301 	ands.w	r3, r0, #1
 800093a:	d00a      	beq.n	8000952 <__swsetup_r+0x9e>
 800093c:	2300      	movs	r3, #0
 800093e:	60a3      	str	r3, [r4, #8]
 8000940:	6963      	ldr	r3, [r4, #20]
 8000942:	425b      	negs	r3, r3
 8000944:	61a3      	str	r3, [r4, #24]
 8000946:	6923      	ldr	r3, [r4, #16]
 8000948:	b943      	cbnz	r3, 800095c <__swsetup_r+0xa8>
 800094a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800094e:	d1c4      	bne.n	80008da <__swsetup_r+0x26>
 8000950:	bd38      	pop	{r3, r4, r5, pc}
 8000952:	0781      	lsls	r1, r0, #30
 8000954:	bf58      	it	pl
 8000956:	6963      	ldrpl	r3, [r4, #20]
 8000958:	60a3      	str	r3, [r4, #8]
 800095a:	e7f4      	b.n	8000946 <__swsetup_r+0x92>
 800095c:	2000      	movs	r0, #0
 800095e:	e7f7      	b.n	8000950 <__swsetup_r+0x9c>
 8000960:	20000058 	.word	0x20000058

08000964 <memset>:
 8000964:	4603      	mov	r3, r0
 8000966:	4402      	add	r2, r0
 8000968:	4293      	cmp	r3, r2
 800096a:	d100      	bne.n	800096e <memset+0xa>
 800096c:	4770      	bx	lr
 800096e:	f803 1b01 	strb.w	r1, [r3], #1
 8000972:	e7f9      	b.n	8000968 <memset+0x4>

08000974 <_close_r>:
 8000974:	b538      	push	{r3, r4, r5, lr}
 8000976:	2300      	movs	r3, #0
 8000978:	4d05      	ldr	r5, [pc, #20]	; (8000990 <_close_r+0x1c>)
 800097a:	4604      	mov	r4, r0
 800097c:	4608      	mov	r0, r1
 800097e:	602b      	str	r3, [r5, #0]
 8000980:	f7ff fd7b 	bl	800047a <_close>
 8000984:	1c43      	adds	r3, r0, #1
 8000986:	d102      	bne.n	800098e <_close_r+0x1a>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	b103      	cbz	r3, 800098e <_close_r+0x1a>
 800098c:	6023      	str	r3, [r4, #0]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
 8000990:	200001b8 	.word	0x200001b8

08000994 <_lseek_r>:
 8000994:	b538      	push	{r3, r4, r5, lr}
 8000996:	4604      	mov	r4, r0
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	2200      	movs	r2, #0
 800099e:	4d05      	ldr	r5, [pc, #20]	; (80009b4 <_lseek_r+0x20>)
 80009a0:	602a      	str	r2, [r5, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f7ff fd8d 	bl	80004c2 <_lseek>
 80009a8:	1c43      	adds	r3, r0, #1
 80009aa:	d102      	bne.n	80009b2 <_lseek_r+0x1e>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	b103      	cbz	r3, 80009b2 <_lseek_r+0x1e>
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	bd38      	pop	{r3, r4, r5, pc}
 80009b4:	200001b8 	.word	0x200001b8

080009b8 <_read_r>:
 80009b8:	b538      	push	{r3, r4, r5, lr}
 80009ba:	4604      	mov	r4, r0
 80009bc:	4608      	mov	r0, r1
 80009be:	4611      	mov	r1, r2
 80009c0:	2200      	movs	r2, #0
 80009c2:	4d05      	ldr	r5, [pc, #20]	; (80009d8 <_read_r+0x20>)
 80009c4:	602a      	str	r2, [r5, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	f7ff fd1e 	bl	8000408 <_read>
 80009cc:	1c43      	adds	r3, r0, #1
 80009ce:	d102      	bne.n	80009d6 <_read_r+0x1e>
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	b103      	cbz	r3, 80009d6 <_read_r+0x1e>
 80009d4:	6023      	str	r3, [r4, #0]
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
 80009d8:	200001b8 	.word	0x200001b8

080009dc <_write_r>:
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	4604      	mov	r4, r0
 80009e0:	4608      	mov	r0, r1
 80009e2:	4611      	mov	r1, r2
 80009e4:	2200      	movs	r2, #0
 80009e6:	4d05      	ldr	r5, [pc, #20]	; (80009fc <_write_r+0x20>)
 80009e8:	602a      	str	r2, [r5, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	f7ff fd29 	bl	8000442 <_write>
 80009f0:	1c43      	adds	r3, r0, #1
 80009f2:	d102      	bne.n	80009fa <_write_r+0x1e>
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	b103      	cbz	r3, 80009fa <_write_r+0x1e>
 80009f8:	6023      	str	r3, [r4, #0]
 80009fa:	bd38      	pop	{r3, r4, r5, pc}
 80009fc:	200001b8 	.word	0x200001b8

08000a00 <__errno>:
 8000a00:	4b01      	ldr	r3, [pc, #4]	; (8000a08 <__errno+0x8>)
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000058 	.word	0x20000058

08000a0c <__libc_init_array>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	2600      	movs	r6, #0
 8000a10:	4d0c      	ldr	r5, [pc, #48]	; (8000a44 <__libc_init_array+0x38>)
 8000a12:	4c0d      	ldr	r4, [pc, #52]	; (8000a48 <__libc_init_array+0x3c>)
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	42a6      	cmp	r6, r4
 8000a1a:	d109      	bne.n	8000a30 <__libc_init_array+0x24>
 8000a1c:	f000 fa4e 	bl	8000ebc <_init>
 8000a20:	2600      	movs	r6, #0
 8000a22:	4d0a      	ldr	r5, [pc, #40]	; (8000a4c <__libc_init_array+0x40>)
 8000a24:	4c0a      	ldr	r4, [pc, #40]	; (8000a50 <__libc_init_array+0x44>)
 8000a26:	1b64      	subs	r4, r4, r5
 8000a28:	10a4      	asrs	r4, r4, #2
 8000a2a:	42a6      	cmp	r6, r4
 8000a2c:	d105      	bne.n	8000a3a <__libc_init_array+0x2e>
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a34:	4798      	blx	r3
 8000a36:	3601      	adds	r6, #1
 8000a38:	e7ee      	b.n	8000a18 <__libc_init_array+0xc>
 8000a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a3e:	4798      	blx	r3
 8000a40:	3601      	adds	r6, #1
 8000a42:	e7f2      	b.n	8000a2a <__libc_init_array+0x1e>
 8000a44:	08000f14 	.word	0x08000f14
 8000a48:	08000f14 	.word	0x08000f14
 8000a4c:	08000f14 	.word	0x08000f14
 8000a50:	08000f18 	.word	0x08000f18

08000a54 <__retarget_lock_acquire_recursive>:
 8000a54:	4770      	bx	lr

08000a56 <__retarget_lock_release_recursive>:
 8000a56:	4770      	bx	lr

08000a58 <_free_r>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	4605      	mov	r5, r0
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d040      	beq.n	8000ae2 <_free_r+0x8a>
 8000a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a64:	1f0c      	subs	r4, r1, #4
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bfb8      	it	lt
 8000a6a:	18e4      	addlt	r4, r4, r3
 8000a6c:	f000 f8dc 	bl	8000c28 <__malloc_lock>
 8000a70:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <_free_r+0x8c>)
 8000a72:	6813      	ldr	r3, [r2, #0]
 8000a74:	b933      	cbnz	r3, 8000a84 <_free_r+0x2c>
 8000a76:	6063      	str	r3, [r4, #4]
 8000a78:	6014      	str	r4, [r2, #0]
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a80:	f000 b8d8 	b.w	8000c34 <__malloc_unlock>
 8000a84:	42a3      	cmp	r3, r4
 8000a86:	d908      	bls.n	8000a9a <_free_r+0x42>
 8000a88:	6820      	ldr	r0, [r4, #0]
 8000a8a:	1821      	adds	r1, r4, r0
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	bf01      	itttt	eq
 8000a90:	6819      	ldreq	r1, [r3, #0]
 8000a92:	685b      	ldreq	r3, [r3, #4]
 8000a94:	1809      	addeq	r1, r1, r0
 8000a96:	6021      	streq	r1, [r4, #0]
 8000a98:	e7ed      	b.n	8000a76 <_free_r+0x1e>
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	b10b      	cbz	r3, 8000aa4 <_free_r+0x4c>
 8000aa0:	42a3      	cmp	r3, r4
 8000aa2:	d9fa      	bls.n	8000a9a <_free_r+0x42>
 8000aa4:	6811      	ldr	r1, [r2, #0]
 8000aa6:	1850      	adds	r0, r2, r1
 8000aa8:	42a0      	cmp	r0, r4
 8000aaa:	d10b      	bne.n	8000ac4 <_free_r+0x6c>
 8000aac:	6820      	ldr	r0, [r4, #0]
 8000aae:	4401      	add	r1, r0
 8000ab0:	1850      	adds	r0, r2, r1
 8000ab2:	4283      	cmp	r3, r0
 8000ab4:	6011      	str	r1, [r2, #0]
 8000ab6:	d1e0      	bne.n	8000a7a <_free_r+0x22>
 8000ab8:	6818      	ldr	r0, [r3, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4408      	add	r0, r1
 8000abe:	6010      	str	r0, [r2, #0]
 8000ac0:	6053      	str	r3, [r2, #4]
 8000ac2:	e7da      	b.n	8000a7a <_free_r+0x22>
 8000ac4:	d902      	bls.n	8000acc <_free_r+0x74>
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	602b      	str	r3, [r5, #0]
 8000aca:	e7d6      	b.n	8000a7a <_free_r+0x22>
 8000acc:	6820      	ldr	r0, [r4, #0]
 8000ace:	1821      	adds	r1, r4, r0
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	bf01      	itttt	eq
 8000ad4:	6819      	ldreq	r1, [r3, #0]
 8000ad6:	685b      	ldreq	r3, [r3, #4]
 8000ad8:	1809      	addeq	r1, r1, r0
 8000ada:	6021      	streq	r1, [r4, #0]
 8000adc:	6063      	str	r3, [r4, #4]
 8000ade:	6054      	str	r4, [r2, #4]
 8000ae0:	e7cb      	b.n	8000a7a <_free_r+0x22>
 8000ae2:	bd38      	pop	{r3, r4, r5, pc}
 8000ae4:	200001c0 	.word	0x200001c0

08000ae8 <sbrk_aligned>:
 8000ae8:	b570      	push	{r4, r5, r6, lr}
 8000aea:	4e0e      	ldr	r6, [pc, #56]	; (8000b24 <sbrk_aligned+0x3c>)
 8000aec:	460c      	mov	r4, r1
 8000aee:	6831      	ldr	r1, [r6, #0]
 8000af0:	4605      	mov	r5, r0
 8000af2:	b911      	cbnz	r1, 8000afa <sbrk_aligned+0x12>
 8000af4:	f000 f9d2 	bl	8000e9c <_sbrk_r>
 8000af8:	6030      	str	r0, [r6, #0]
 8000afa:	4621      	mov	r1, r4
 8000afc:	4628      	mov	r0, r5
 8000afe:	f000 f9cd 	bl	8000e9c <_sbrk_r>
 8000b02:	1c43      	adds	r3, r0, #1
 8000b04:	d00a      	beq.n	8000b1c <sbrk_aligned+0x34>
 8000b06:	1cc4      	adds	r4, r0, #3
 8000b08:	f024 0403 	bic.w	r4, r4, #3
 8000b0c:	42a0      	cmp	r0, r4
 8000b0e:	d007      	beq.n	8000b20 <sbrk_aligned+0x38>
 8000b10:	1a21      	subs	r1, r4, r0
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 f9c2 	bl	8000e9c <_sbrk_r>
 8000b18:	3001      	adds	r0, #1
 8000b1a:	d101      	bne.n	8000b20 <sbrk_aligned+0x38>
 8000b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8000b20:	4620      	mov	r0, r4
 8000b22:	bd70      	pop	{r4, r5, r6, pc}
 8000b24:	200001c4 	.word	0x200001c4

08000b28 <_malloc_r>:
 8000b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b2c:	1ccd      	adds	r5, r1, #3
 8000b2e:	f025 0503 	bic.w	r5, r5, #3
 8000b32:	3508      	adds	r5, #8
 8000b34:	2d0c      	cmp	r5, #12
 8000b36:	bf38      	it	cc
 8000b38:	250c      	movcc	r5, #12
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	4607      	mov	r7, r0
 8000b3e:	db01      	blt.n	8000b44 <_malloc_r+0x1c>
 8000b40:	42a9      	cmp	r1, r5
 8000b42:	d905      	bls.n	8000b50 <_malloc_r+0x28>
 8000b44:	230c      	movs	r3, #12
 8000b46:	2600      	movs	r6, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000c24 <_malloc_r+0xfc>
 8000b54:	f000 f868 	bl	8000c28 <__malloc_lock>
 8000b58:	f8d8 3000 	ldr.w	r3, [r8]
 8000b5c:	461c      	mov	r4, r3
 8000b5e:	bb5c      	cbnz	r4, 8000bb8 <_malloc_r+0x90>
 8000b60:	4629      	mov	r1, r5
 8000b62:	4638      	mov	r0, r7
 8000b64:	f7ff ffc0 	bl	8000ae8 <sbrk_aligned>
 8000b68:	1c43      	adds	r3, r0, #1
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	d155      	bne.n	8000c1a <_malloc_r+0xf2>
 8000b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8000b72:	4626      	mov	r6, r4
 8000b74:	2e00      	cmp	r6, #0
 8000b76:	d145      	bne.n	8000c04 <_malloc_r+0xdc>
 8000b78:	2c00      	cmp	r4, #0
 8000b7a:	d048      	beq.n	8000c0e <_malloc_r+0xe6>
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	4631      	mov	r1, r6
 8000b80:	4638      	mov	r0, r7
 8000b82:	eb04 0903 	add.w	r9, r4, r3
 8000b86:	f000 f989 	bl	8000e9c <_sbrk_r>
 8000b8a:	4581      	cmp	r9, r0
 8000b8c:	d13f      	bne.n	8000c0e <_malloc_r+0xe6>
 8000b8e:	6821      	ldr	r1, [r4, #0]
 8000b90:	4638      	mov	r0, r7
 8000b92:	1a6d      	subs	r5, r5, r1
 8000b94:	4629      	mov	r1, r5
 8000b96:	f7ff ffa7 	bl	8000ae8 <sbrk_aligned>
 8000b9a:	3001      	adds	r0, #1
 8000b9c:	d037      	beq.n	8000c0e <_malloc_r+0xe6>
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	442b      	add	r3, r5
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d038      	beq.n	8000c1e <_malloc_r+0xf6>
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	42a2      	cmp	r2, r4
 8000bb0:	d12b      	bne.n	8000c0a <_malloc_r+0xe2>
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	e00f      	b.n	8000bd8 <_malloc_r+0xb0>
 8000bb8:	6822      	ldr	r2, [r4, #0]
 8000bba:	1b52      	subs	r2, r2, r5
 8000bbc:	d41f      	bmi.n	8000bfe <_malloc_r+0xd6>
 8000bbe:	2a0b      	cmp	r2, #11
 8000bc0:	d917      	bls.n	8000bf2 <_malloc_r+0xca>
 8000bc2:	1961      	adds	r1, r4, r5
 8000bc4:	42a3      	cmp	r3, r4
 8000bc6:	6025      	str	r5, [r4, #0]
 8000bc8:	bf18      	it	ne
 8000bca:	6059      	strne	r1, [r3, #4]
 8000bcc:	6863      	ldr	r3, [r4, #4]
 8000bce:	bf08      	it	eq
 8000bd0:	f8c8 1000 	streq.w	r1, [r8]
 8000bd4:	5162      	str	r2, [r4, r5]
 8000bd6:	604b      	str	r3, [r1, #4]
 8000bd8:	4638      	mov	r0, r7
 8000bda:	f104 060b 	add.w	r6, r4, #11
 8000bde:	f000 f829 	bl	8000c34 <__malloc_unlock>
 8000be2:	f026 0607 	bic.w	r6, r6, #7
 8000be6:	1d23      	adds	r3, r4, #4
 8000be8:	1af2      	subs	r2, r6, r3
 8000bea:	d0ae      	beq.n	8000b4a <_malloc_r+0x22>
 8000bec:	1b9b      	subs	r3, r3, r6
 8000bee:	50a3      	str	r3, [r4, r2]
 8000bf0:	e7ab      	b.n	8000b4a <_malloc_r+0x22>
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	6862      	ldr	r2, [r4, #4]
 8000bf6:	d1dd      	bne.n	8000bb4 <_malloc_r+0x8c>
 8000bf8:	f8c8 2000 	str.w	r2, [r8]
 8000bfc:	e7ec      	b.n	8000bd8 <_malloc_r+0xb0>
 8000bfe:	4623      	mov	r3, r4
 8000c00:	6864      	ldr	r4, [r4, #4]
 8000c02:	e7ac      	b.n	8000b5e <_malloc_r+0x36>
 8000c04:	4634      	mov	r4, r6
 8000c06:	6876      	ldr	r6, [r6, #4]
 8000c08:	e7b4      	b.n	8000b74 <_malloc_r+0x4c>
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	e7cc      	b.n	8000ba8 <_malloc_r+0x80>
 8000c0e:	230c      	movs	r3, #12
 8000c10:	4638      	mov	r0, r7
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	f000 f80e 	bl	8000c34 <__malloc_unlock>
 8000c18:	e797      	b.n	8000b4a <_malloc_r+0x22>
 8000c1a:	6025      	str	r5, [r4, #0]
 8000c1c:	e7dc      	b.n	8000bd8 <_malloc_r+0xb0>
 8000c1e:	605b      	str	r3, [r3, #4]
 8000c20:	deff      	udf	#255	; 0xff
 8000c22:	bf00      	nop
 8000c24:	200001c0 	.word	0x200001c0

08000c28 <__malloc_lock>:
 8000c28:	4801      	ldr	r0, [pc, #4]	; (8000c30 <__malloc_lock+0x8>)
 8000c2a:	f7ff bf13 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 8000c2e:	bf00      	nop
 8000c30:	200001bc 	.word	0x200001bc

08000c34 <__malloc_unlock>:
 8000c34:	4801      	ldr	r0, [pc, #4]	; (8000c3c <__malloc_unlock+0x8>)
 8000c36:	f7ff bf0e 	b.w	8000a56 <__retarget_lock_release_recursive>
 8000c3a:	bf00      	nop
 8000c3c:	200001bc 	.word	0x200001bc

08000c40 <__sflush_r>:
 8000c40:	898a      	ldrh	r2, [r1, #12]
 8000c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c44:	4605      	mov	r5, r0
 8000c46:	0710      	lsls	r0, r2, #28
 8000c48:	460c      	mov	r4, r1
 8000c4a:	d457      	bmi.n	8000cfc <__sflush_r+0xbc>
 8000c4c:	684b      	ldr	r3, [r1, #4]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	dc04      	bgt.n	8000c5c <__sflush_r+0x1c>
 8000c52:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	dc01      	bgt.n	8000c5c <__sflush_r+0x1c>
 8000c58:	2000      	movs	r0, #0
 8000c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d0fa      	beq.n	8000c58 <__sflush_r+0x18>
 8000c62:	2300      	movs	r3, #0
 8000c64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c68:	682f      	ldr	r7, [r5, #0]
 8000c6a:	6a21      	ldr	r1, [r4, #32]
 8000c6c:	602b      	str	r3, [r5, #0]
 8000c6e:	d032      	beq.n	8000cd6 <__sflush_r+0x96>
 8000c70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c72:	89a3      	ldrh	r3, [r4, #12]
 8000c74:	075a      	lsls	r2, r3, #29
 8000c76:	d505      	bpl.n	8000c84 <__sflush_r+0x44>
 8000c78:	6863      	ldr	r3, [r4, #4]
 8000c7a:	1ac0      	subs	r0, r0, r3
 8000c7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c7e:	b10b      	cbz	r3, 8000c84 <__sflush_r+0x44>
 8000c80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c82:	1ac0      	subs	r0, r0, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	4602      	mov	r2, r0
 8000c88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	6a21      	ldr	r1, [r4, #32]
 8000c8e:	47b0      	blx	r6
 8000c90:	1c43      	adds	r3, r0, #1
 8000c92:	89a3      	ldrh	r3, [r4, #12]
 8000c94:	d106      	bne.n	8000ca4 <__sflush_r+0x64>
 8000c96:	6829      	ldr	r1, [r5, #0]
 8000c98:	291d      	cmp	r1, #29
 8000c9a:	d82b      	bhi.n	8000cf4 <__sflush_r+0xb4>
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <__sflush_r+0x100>)
 8000c9e:	410a      	asrs	r2, r1
 8000ca0:	07d6      	lsls	r6, r2, #31
 8000ca2:	d427      	bmi.n	8000cf4 <__sflush_r+0xb4>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6062      	str	r2, [r4, #4]
 8000ca8:	6922      	ldr	r2, [r4, #16]
 8000caa:	04d9      	lsls	r1, r3, #19
 8000cac:	6022      	str	r2, [r4, #0]
 8000cae:	d504      	bpl.n	8000cba <__sflush_r+0x7a>
 8000cb0:	1c42      	adds	r2, r0, #1
 8000cb2:	d101      	bne.n	8000cb8 <__sflush_r+0x78>
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	b903      	cbnz	r3, 8000cba <__sflush_r+0x7a>
 8000cb8:	6560      	str	r0, [r4, #84]	; 0x54
 8000cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cbc:	602f      	str	r7, [r5, #0]
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d0ca      	beq.n	8000c58 <__sflush_r+0x18>
 8000cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	d002      	beq.n	8000cd0 <__sflush_r+0x90>
 8000cca:	4628      	mov	r0, r5
 8000ccc:	f7ff fec4 	bl	8000a58 <_free_r>
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	6360      	str	r0, [r4, #52]	; 0x34
 8000cd4:	e7c1      	b.n	8000c5a <__sflush_r+0x1a>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4628      	mov	r0, r5
 8000cda:	47b0      	blx	r6
 8000cdc:	1c41      	adds	r1, r0, #1
 8000cde:	d1c8      	bne.n	8000c72 <__sflush_r+0x32>
 8000ce0:	682b      	ldr	r3, [r5, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0c5      	beq.n	8000c72 <__sflush_r+0x32>
 8000ce6:	2b1d      	cmp	r3, #29
 8000ce8:	d001      	beq.n	8000cee <__sflush_r+0xae>
 8000cea:	2b16      	cmp	r3, #22
 8000cec:	d101      	bne.n	8000cf2 <__sflush_r+0xb2>
 8000cee:	602f      	str	r7, [r5, #0]
 8000cf0:	e7b2      	b.n	8000c58 <__sflush_r+0x18>
 8000cf2:	89a3      	ldrh	r3, [r4, #12]
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	81a3      	strh	r3, [r4, #12]
 8000cfa:	e7ae      	b.n	8000c5a <__sflush_r+0x1a>
 8000cfc:	690f      	ldr	r7, [r1, #16]
 8000cfe:	2f00      	cmp	r7, #0
 8000d00:	d0aa      	beq.n	8000c58 <__sflush_r+0x18>
 8000d02:	0793      	lsls	r3, r2, #30
 8000d04:	bf18      	it	ne
 8000d06:	2300      	movne	r3, #0
 8000d08:	680e      	ldr	r6, [r1, #0]
 8000d0a:	bf08      	it	eq
 8000d0c:	694b      	ldreq	r3, [r1, #20]
 8000d0e:	1bf6      	subs	r6, r6, r7
 8000d10:	600f      	str	r7, [r1, #0]
 8000d12:	608b      	str	r3, [r1, #8]
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	dd9f      	ble.n	8000c58 <__sflush_r+0x18>
 8000d18:	4633      	mov	r3, r6
 8000d1a:	463a      	mov	r2, r7
 8000d1c:	4628      	mov	r0, r5
 8000d1e:	6a21      	ldr	r1, [r4, #32]
 8000d20:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000d24:	47e0      	blx	ip
 8000d26:	2800      	cmp	r0, #0
 8000d28:	dc06      	bgt.n	8000d38 <__sflush_r+0xf8>
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d34:	81a3      	strh	r3, [r4, #12]
 8000d36:	e790      	b.n	8000c5a <__sflush_r+0x1a>
 8000d38:	4407      	add	r7, r0
 8000d3a:	1a36      	subs	r6, r6, r0
 8000d3c:	e7ea      	b.n	8000d14 <__sflush_r+0xd4>
 8000d3e:	bf00      	nop
 8000d40:	dfbffffe 	.word	0xdfbffffe

08000d44 <_fflush_r>:
 8000d44:	b538      	push	{r3, r4, r5, lr}
 8000d46:	690b      	ldr	r3, [r1, #16]
 8000d48:	4605      	mov	r5, r0
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	b913      	cbnz	r3, 8000d54 <_fflush_r+0x10>
 8000d4e:	2500      	movs	r5, #0
 8000d50:	4628      	mov	r0, r5
 8000d52:	bd38      	pop	{r3, r4, r5, pc}
 8000d54:	b118      	cbz	r0, 8000d5e <_fflush_r+0x1a>
 8000d56:	6a03      	ldr	r3, [r0, #32]
 8000d58:	b90b      	cbnz	r3, 8000d5e <_fflush_r+0x1a>
 8000d5a:	f7ff fc99 	bl	8000690 <__sinit>
 8000d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f3      	beq.n	8000d4e <_fflush_r+0xa>
 8000d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d68:	07d0      	lsls	r0, r2, #31
 8000d6a:	d404      	bmi.n	8000d76 <_fflush_r+0x32>
 8000d6c:	0599      	lsls	r1, r3, #22
 8000d6e:	d402      	bmi.n	8000d76 <_fflush_r+0x32>
 8000d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d72:	f7ff fe6f 	bl	8000a54 <__retarget_lock_acquire_recursive>
 8000d76:	4628      	mov	r0, r5
 8000d78:	4621      	mov	r1, r4
 8000d7a:	f7ff ff61 	bl	8000c40 <__sflush_r>
 8000d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d80:	4605      	mov	r5, r0
 8000d82:	07da      	lsls	r2, r3, #31
 8000d84:	d4e4      	bmi.n	8000d50 <_fflush_r+0xc>
 8000d86:	89a3      	ldrh	r3, [r4, #12]
 8000d88:	059b      	lsls	r3, r3, #22
 8000d8a:	d4e1      	bmi.n	8000d50 <_fflush_r+0xc>
 8000d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d8e:	f7ff fe62 	bl	8000a56 <__retarget_lock_release_recursive>
 8000d92:	e7dd      	b.n	8000d50 <_fflush_r+0xc>

08000d94 <__swhatbuf_r>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	460c      	mov	r4, r1
 8000d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d9c:	4615      	mov	r5, r2
 8000d9e:	2900      	cmp	r1, #0
 8000da0:	461e      	mov	r6, r3
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	da0c      	bge.n	8000dc0 <__swhatbuf_r+0x2c>
 8000da6:	89a3      	ldrh	r3, [r4, #12]
 8000da8:	2100      	movs	r1, #0
 8000daa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000dae:	bf0c      	ite	eq
 8000db0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000db4:	2340      	movne	r3, #64	; 0x40
 8000db6:	2000      	movs	r0, #0
 8000db8:	6031      	str	r1, [r6, #0]
 8000dba:	602b      	str	r3, [r5, #0]
 8000dbc:	b016      	add	sp, #88	; 0x58
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
 8000dc0:	466a      	mov	r2, sp
 8000dc2:	f000 f849 	bl	8000e58 <_fstat_r>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	dbed      	blt.n	8000da6 <__swhatbuf_r+0x12>
 8000dca:	9901      	ldr	r1, [sp, #4]
 8000dcc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000dd0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000dd4:	4259      	negs	r1, r3
 8000dd6:	4159      	adcs	r1, r3
 8000dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ddc:	e7eb      	b.n	8000db6 <__swhatbuf_r+0x22>

08000dde <__smakebuf_r>:
 8000dde:	898b      	ldrh	r3, [r1, #12]
 8000de0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de2:	079d      	lsls	r5, r3, #30
 8000de4:	4606      	mov	r6, r0
 8000de6:	460c      	mov	r4, r1
 8000de8:	d507      	bpl.n	8000dfa <__smakebuf_r+0x1c>
 8000dea:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000dee:	6023      	str	r3, [r4, #0]
 8000df0:	6123      	str	r3, [r4, #16]
 8000df2:	2301      	movs	r3, #1
 8000df4:	6163      	str	r3, [r4, #20]
 8000df6:	b002      	add	sp, #8
 8000df8:	bd70      	pop	{r4, r5, r6, pc}
 8000dfa:	466a      	mov	r2, sp
 8000dfc:	ab01      	add	r3, sp, #4
 8000dfe:	f7ff ffc9 	bl	8000d94 <__swhatbuf_r>
 8000e02:	9900      	ldr	r1, [sp, #0]
 8000e04:	4605      	mov	r5, r0
 8000e06:	4630      	mov	r0, r6
 8000e08:	f7ff fe8e 	bl	8000b28 <_malloc_r>
 8000e0c:	b948      	cbnz	r0, 8000e22 <__smakebuf_r+0x44>
 8000e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e12:	059a      	lsls	r2, r3, #22
 8000e14:	d4ef      	bmi.n	8000df6 <__smakebuf_r+0x18>
 8000e16:	f023 0303 	bic.w	r3, r3, #3
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	81a3      	strh	r3, [r4, #12]
 8000e20:	e7e3      	b.n	8000dea <__smakebuf_r+0xc>
 8000e22:	89a3      	ldrh	r3, [r4, #12]
 8000e24:	6020      	str	r0, [r4, #0]
 8000e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2a:	81a3      	strh	r3, [r4, #12]
 8000e2c:	9b00      	ldr	r3, [sp, #0]
 8000e2e:	6120      	str	r0, [r4, #16]
 8000e30:	6163      	str	r3, [r4, #20]
 8000e32:	9b01      	ldr	r3, [sp, #4]
 8000e34:	b15b      	cbz	r3, 8000e4e <__smakebuf_r+0x70>
 8000e36:	4630      	mov	r0, r6
 8000e38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e3c:	f000 f81e 	bl	8000e7c <_isatty_r>
 8000e40:	b128      	cbz	r0, 8000e4e <__smakebuf_r+0x70>
 8000e42:	89a3      	ldrh	r3, [r4, #12]
 8000e44:	f023 0303 	bic.w	r3, r3, #3
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	81a3      	strh	r3, [r4, #12]
 8000e4e:	89a3      	ldrh	r3, [r4, #12]
 8000e50:	431d      	orrs	r5, r3
 8000e52:	81a5      	strh	r5, [r4, #12]
 8000e54:	e7cf      	b.n	8000df6 <__smakebuf_r+0x18>
	...

08000e58 <_fstat_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	4d06      	ldr	r5, [pc, #24]	; (8000e78 <_fstat_r+0x20>)
 8000e5e:	4604      	mov	r4, r0
 8000e60:	4608      	mov	r0, r1
 8000e62:	4611      	mov	r1, r2
 8000e64:	602b      	str	r3, [r5, #0]
 8000e66:	f7ff fb13 	bl	8000490 <_fstat>
 8000e6a:	1c43      	adds	r3, r0, #1
 8000e6c:	d102      	bne.n	8000e74 <_fstat_r+0x1c>
 8000e6e:	682b      	ldr	r3, [r5, #0]
 8000e70:	b103      	cbz	r3, 8000e74 <_fstat_r+0x1c>
 8000e72:	6023      	str	r3, [r4, #0]
 8000e74:	bd38      	pop	{r3, r4, r5, pc}
 8000e76:	bf00      	nop
 8000e78:	200001b8 	.word	0x200001b8

08000e7c <_isatty_r>:
 8000e7c:	b538      	push	{r3, r4, r5, lr}
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4d05      	ldr	r5, [pc, #20]	; (8000e98 <_isatty_r+0x1c>)
 8000e82:	4604      	mov	r4, r0
 8000e84:	4608      	mov	r0, r1
 8000e86:	602b      	str	r3, [r5, #0]
 8000e88:	f7ff fb11 	bl	80004ae <_isatty>
 8000e8c:	1c43      	adds	r3, r0, #1
 8000e8e:	d102      	bne.n	8000e96 <_isatty_r+0x1a>
 8000e90:	682b      	ldr	r3, [r5, #0]
 8000e92:	b103      	cbz	r3, 8000e96 <_isatty_r+0x1a>
 8000e94:	6023      	str	r3, [r4, #0]
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
 8000e98:	200001b8 	.word	0x200001b8

08000e9c <_sbrk_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4d05      	ldr	r5, [pc, #20]	; (8000eb8 <_sbrk_r+0x1c>)
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	602b      	str	r3, [r5, #0]
 8000ea8:	f7ff fb18 	bl	80004dc <_sbrk>
 8000eac:	1c43      	adds	r3, r0, #1
 8000eae:	d102      	bne.n	8000eb6 <_sbrk_r+0x1a>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	b103      	cbz	r3, 8000eb6 <_sbrk_r+0x1a>
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	bd38      	pop	{r3, r4, r5, pc}
 8000eb8:	200001b8 	.word	0x200001b8

08000ebc <_init>:
 8000ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ebe:	bf00      	nop
 8000ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ec2:	bc08      	pop	{r3}
 8000ec4:	469e      	mov	lr, r3
 8000ec6:	4770      	bx	lr

08000ec8 <_fini>:
 8000ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eca:	bf00      	nop
 8000ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ece:	bc08      	pop	{r3}
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	4770      	bx	lr
