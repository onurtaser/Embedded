
USART3_int_pend.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b50  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c90  08000c90  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c90  08000c90  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c90  08000c90  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c90  08000c90  00010c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000cf4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000cf4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000912  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000311  00000000  00000000  000209da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00020cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000be  00000000  00000000  00020e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c77  00000000  00000000  00020ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001417  00000000  00000000  00023b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096ed  00000000  00000000  00024f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009bc  00000000  00000000  0002e644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0002f000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c68 	.word	0x08000c68

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08000c68 	.word	0x08000c68

08000170 <main>:
#endif

#define USART3_IRQNO 39

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0

	//1. Manually pend the pending bit for the USART3 IRQ number in NVIC
	uint32_t *pISPR1 = (uint32_t*) 0XE000E204; //+4 to access ISPR1 because IRQ number is 39.
 8000176:	4b08      	ldr	r3, [pc, #32]	; (8000198 <main+0x28>)
 8000178:	607b      	str	r3, [r7, #4]

	*pISPR1 |= ( 1 << (USART3_IRQNO % 32));
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	601a      	str	r2, [r3, #0]

	//2. Enable the USART3 IRQ number in NVIC
	uint32_t *pISER1 = (uint32_t*) 0xE000E104;
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <main+0x2c>)
 8000188:	603b      	str	r3, [r7, #0]

	*pISER1 |= ( 1 << (USART3_IRQNO % 32));
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000192:	683b      	ldr	r3, [r7, #0]
 8000194:	601a      	str	r2, [r3, #0]



	for(;;);
 8000196:	e7fe      	b.n	8000196 <main+0x26>
 8000198:	e000e204 	.word	0xe000e204
 800019c:	e000e104 	.word	0xe000e104

080001a0 <USART3_IRQHandler>:
}

void USART3_IRQHandler(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0

	printf("in USART3 isr\n");
 80001a4:	4802      	ldr	r0, [pc, #8]	; (80001b0 <USART3_IRQHandler+0x10>)
 80001a6:	f000 f9d3 	bl	8000550 <puts>

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	08000c80 	.word	0x08000c80

080001b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	617b      	str	r3, [r7, #20]
 80001c4:	e00a      	b.n	80001dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80001c6:	f3af 8000 	nop.w
 80001ca:	4601      	mov	r1, r0
 80001cc:	68bb      	ldr	r3, [r7, #8]
 80001ce:	1c5a      	adds	r2, r3, #1
 80001d0:	60ba      	str	r2, [r7, #8]
 80001d2:	b2ca      	uxtb	r2, r1
 80001d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001d6:	697b      	ldr	r3, [r7, #20]
 80001d8:	3301      	adds	r3, #1
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	697a      	ldr	r2, [r7, #20]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	dbf0      	blt.n	80001c6 <_read+0x12>
  }

  return len;
 80001e4:	687b      	ldr	r3, [r7, #4]
}
 80001e6:	4618      	mov	r0, r3
 80001e8:	3718      	adds	r7, #24
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}

080001ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80001ee:	b580      	push	{r7, lr}
 80001f0:	b086      	sub	sp, #24
 80001f2:	af00      	add	r7, sp, #0
 80001f4:	60f8      	str	r0, [r7, #12]
 80001f6:	60b9      	str	r1, [r7, #8]
 80001f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]
 80001fe:	e009      	b.n	8000214 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	1c5a      	adds	r2, r3, #1
 8000204:	60ba      	str	r2, [r7, #8]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4618      	mov	r0, r3
 800020a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800020e:	697b      	ldr	r3, [r7, #20]
 8000210:	3301      	adds	r3, #1
 8000212:	617b      	str	r3, [r7, #20]
 8000214:	697a      	ldr	r2, [r7, #20]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	429a      	cmp	r2, r3
 800021a:	dbf1      	blt.n	8000200 <_write+0x12>
  }
  return len;
 800021c:	687b      	ldr	r3, [r7, #4]
}
 800021e:	4618      	mov	r0, r3
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <_close>:

int _close(int file)
{
 8000226:	b480      	push	{r7}
 8000228:	b083      	sub	sp, #12
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000232:	4618      	mov	r0, r3
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr

0800023c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800024c:	605a      	str	r2, [r3, #4]
  return 0;
 800024e:	2300      	movs	r3, #0
}
 8000250:	4618      	mov	r0, r3
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr

0800025a <_isatty>:

int _isatty(int file)
{
 800025a:	b480      	push	{r7}
 800025c:	b083      	sub	sp, #12
 800025e:	af00      	add	r7, sp, #0
 8000260:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000262:	2301      	movs	r3, #1
}
 8000264:	4618      	mov	r0, r3
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr

0800026e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800026e:	b480      	push	{r7}
 8000270:	b085      	sub	sp, #20
 8000272:	af00      	add	r7, sp, #0
 8000274:	60f8      	str	r0, [r7, #12]
 8000276:	60b9      	str	r1, [r7, #8]
 8000278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800027a:	2300      	movs	r3, #0
}
 800027c:	4618      	mov	r0, r3
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
	...

08000288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000290:	4a14      	ldr	r2, [pc, #80]	; (80002e4 <_sbrk+0x5c>)
 8000292:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <_sbrk+0x60>)
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800029c:	4b13      	ldr	r3, [pc, #76]	; (80002ec <_sbrk+0x64>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d102      	bne.n	80002aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <_sbrk+0x64>)
 80002a6:	4a12      	ldr	r2, [pc, #72]	; (80002f0 <_sbrk+0x68>)
 80002a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002aa:	4b10      	ldr	r3, [pc, #64]	; (80002ec <_sbrk+0x64>)
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4413      	add	r3, r2
 80002b2:	693a      	ldr	r2, [r7, #16]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d207      	bcs.n	80002c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002b8:	f000 fa78 	bl	80007ac <__errno>
 80002bc:	4603      	mov	r3, r0
 80002be:	220c      	movs	r2, #12
 80002c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295
 80002c6:	e009      	b.n	80002dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <_sbrk+0x64>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80002ce:	4b07      	ldr	r3, [pc, #28]	; (80002ec <_sbrk+0x64>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4413      	add	r3, r2
 80002d6:	4a05      	ldr	r2, [pc, #20]	; (80002ec <_sbrk+0x64>)
 80002d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80002da:	68fb      	ldr	r3, [r7, #12]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	3718      	adds	r7, #24
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	20005000 	.word	0x20005000
 80002e8:	00000400 	.word	0x00000400
 80002ec:	20000078 	.word	0x20000078
 80002f0:	200001c8 	.word	0x200001c8

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 fa49 	bl	80007b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff23 	bl	8000170 <main>

0800032a <LoopForever>:

LoopForever:
  b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000338:	08000c98 	.word	0x08000c98
  ldr r2, =_sbss
 800033c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000340:	200001c8 	.word	0x200001c8

08000344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC1_2_IRQHandler>
	...

08000348 <std>:
 8000348:	2300      	movs	r3, #0
 800034a:	b510      	push	{r4, lr}
 800034c:	4604      	mov	r4, r0
 800034e:	e9c0 3300 	strd	r3, r3, [r0]
 8000352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000356:	6083      	str	r3, [r0, #8]
 8000358:	8181      	strh	r1, [r0, #12]
 800035a:	6643      	str	r3, [r0, #100]	; 0x64
 800035c:	81c2      	strh	r2, [r0, #14]
 800035e:	6183      	str	r3, [r0, #24]
 8000360:	4619      	mov	r1, r3
 8000362:	2208      	movs	r2, #8
 8000364:	305c      	adds	r0, #92	; 0x5c
 8000366:	f000 f9d3 	bl	8000710 <memset>
 800036a:	4b05      	ldr	r3, [pc, #20]	; (8000380 <std+0x38>)
 800036c:	6224      	str	r4, [r4, #32]
 800036e:	6263      	str	r3, [r4, #36]	; 0x24
 8000370:	4b04      	ldr	r3, [pc, #16]	; (8000384 <std+0x3c>)
 8000372:	62a3      	str	r3, [r4, #40]	; 0x28
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <std+0x40>)
 8000376:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <std+0x44>)
 800037a:	6323      	str	r3, [r4, #48]	; 0x30
 800037c:	bd10      	pop	{r4, pc}
 800037e:	bf00      	nop
 8000380:	08000561 	.word	0x08000561
 8000384:	08000583 	.word	0x08000583
 8000388:	080005bb 	.word	0x080005bb
 800038c:	080005df 	.word	0x080005df

08000390 <stdio_exit_handler>:
 8000390:	4a02      	ldr	r2, [pc, #8]	; (800039c <stdio_exit_handler+0xc>)
 8000392:	4903      	ldr	r1, [pc, #12]	; (80003a0 <stdio_exit_handler+0x10>)
 8000394:	4803      	ldr	r0, [pc, #12]	; (80003a4 <stdio_exit_handler+0x14>)
 8000396:	f000 b869 	b.w	800046c <_fwalk_sglue>
 800039a:	bf00      	nop
 800039c:	20000000 	.word	0x20000000
 80003a0:	08000af1 	.word	0x08000af1
 80003a4:	2000000c 	.word	0x2000000c

080003a8 <cleanup_stdio>:
 80003a8:	6841      	ldr	r1, [r0, #4]
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <cleanup_stdio+0x34>)
 80003ac:	b510      	push	{r4, lr}
 80003ae:	4299      	cmp	r1, r3
 80003b0:	4604      	mov	r4, r0
 80003b2:	d001      	beq.n	80003b8 <cleanup_stdio+0x10>
 80003b4:	f000 fb9c 	bl	8000af0 <_fflush_r>
 80003b8:	68a1      	ldr	r1, [r4, #8]
 80003ba:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <cleanup_stdio+0x38>)
 80003bc:	4299      	cmp	r1, r3
 80003be:	d002      	beq.n	80003c6 <cleanup_stdio+0x1e>
 80003c0:	4620      	mov	r0, r4
 80003c2:	f000 fb95 	bl	8000af0 <_fflush_r>
 80003c6:	68e1      	ldr	r1, [r4, #12]
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <cleanup_stdio+0x3c>)
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d004      	beq.n	80003d8 <cleanup_stdio+0x30>
 80003ce:	4620      	mov	r0, r4
 80003d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80003d4:	f000 bb8c 	b.w	8000af0 <_fflush_r>
 80003d8:	bd10      	pop	{r4, pc}
 80003da:	bf00      	nop
 80003dc:	2000007c 	.word	0x2000007c
 80003e0:	200000e4 	.word	0x200000e4
 80003e4:	2000014c 	.word	0x2000014c

080003e8 <global_stdio_init.part.0>:
 80003e8:	b510      	push	{r4, lr}
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <global_stdio_init.part.0+0x30>)
 80003ec:	4c0b      	ldr	r4, [pc, #44]	; (800041c <global_stdio_init.part.0+0x34>)
 80003ee:	4a0c      	ldr	r2, [pc, #48]	; (8000420 <global_stdio_init.part.0+0x38>)
 80003f0:	4620      	mov	r0, r4
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	2104      	movs	r1, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	f7ff ffa6 	bl	8000348 <std>
 80003fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000400:	2201      	movs	r2, #1
 8000402:	2109      	movs	r1, #9
 8000404:	f7ff ffa0 	bl	8000348 <std>
 8000408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800040c:	2202      	movs	r2, #2
 800040e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000412:	2112      	movs	r1, #18
 8000414:	f7ff bf98 	b.w	8000348 <std>
 8000418:	200001b4 	.word	0x200001b4
 800041c:	2000007c 	.word	0x2000007c
 8000420:	08000391 	.word	0x08000391

08000424 <__sfp_lock_acquire>:
 8000424:	4801      	ldr	r0, [pc, #4]	; (800042c <__sfp_lock_acquire+0x8>)
 8000426:	f000 b9eb 	b.w	8000800 <__retarget_lock_acquire_recursive>
 800042a:	bf00      	nop
 800042c:	200001bd 	.word	0x200001bd

08000430 <__sfp_lock_release>:
 8000430:	4801      	ldr	r0, [pc, #4]	; (8000438 <__sfp_lock_release+0x8>)
 8000432:	f000 b9e6 	b.w	8000802 <__retarget_lock_release_recursive>
 8000436:	bf00      	nop
 8000438:	200001bd 	.word	0x200001bd

0800043c <__sinit>:
 800043c:	b510      	push	{r4, lr}
 800043e:	4604      	mov	r4, r0
 8000440:	f7ff fff0 	bl	8000424 <__sfp_lock_acquire>
 8000444:	6a23      	ldr	r3, [r4, #32]
 8000446:	b11b      	cbz	r3, 8000450 <__sinit+0x14>
 8000448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800044c:	f7ff bff0 	b.w	8000430 <__sfp_lock_release>
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <__sinit+0x28>)
 8000452:	6223      	str	r3, [r4, #32]
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <__sinit+0x2c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1f5      	bne.n	8000448 <__sinit+0xc>
 800045c:	f7ff ffc4 	bl	80003e8 <global_stdio_init.part.0>
 8000460:	e7f2      	b.n	8000448 <__sinit+0xc>
 8000462:	bf00      	nop
 8000464:	080003a9 	.word	0x080003a9
 8000468:	200001b4 	.word	0x200001b4

0800046c <_fwalk_sglue>:
 800046c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000470:	4607      	mov	r7, r0
 8000472:	4688      	mov	r8, r1
 8000474:	4614      	mov	r4, r2
 8000476:	2600      	movs	r6, #0
 8000478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800047c:	f1b9 0901 	subs.w	r9, r9, #1
 8000480:	d505      	bpl.n	800048e <_fwalk_sglue+0x22>
 8000482:	6824      	ldr	r4, [r4, #0]
 8000484:	2c00      	cmp	r4, #0
 8000486:	d1f7      	bne.n	8000478 <_fwalk_sglue+0xc>
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800048e:	89ab      	ldrh	r3, [r5, #12]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d907      	bls.n	80004a4 <_fwalk_sglue+0x38>
 8000494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000498:	3301      	adds	r3, #1
 800049a:	d003      	beq.n	80004a4 <_fwalk_sglue+0x38>
 800049c:	4629      	mov	r1, r5
 800049e:	4638      	mov	r0, r7
 80004a0:	47c0      	blx	r8
 80004a2:	4306      	orrs	r6, r0
 80004a4:	3568      	adds	r5, #104	; 0x68
 80004a6:	e7e9      	b.n	800047c <_fwalk_sglue+0x10>

080004a8 <_puts_r>:
 80004a8:	6a03      	ldr	r3, [r0, #32]
 80004aa:	b570      	push	{r4, r5, r6, lr}
 80004ac:	4605      	mov	r5, r0
 80004ae:	460e      	mov	r6, r1
 80004b0:	6884      	ldr	r4, [r0, #8]
 80004b2:	b90b      	cbnz	r3, 80004b8 <_puts_r+0x10>
 80004b4:	f7ff ffc2 	bl	800043c <__sinit>
 80004b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80004ba:	07db      	lsls	r3, r3, #31
 80004bc:	d405      	bmi.n	80004ca <_puts_r+0x22>
 80004be:	89a3      	ldrh	r3, [r4, #12]
 80004c0:	0598      	lsls	r0, r3, #22
 80004c2:	d402      	bmi.n	80004ca <_puts_r+0x22>
 80004c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80004c6:	f000 f99b 	bl	8000800 <__retarget_lock_acquire_recursive>
 80004ca:	89a3      	ldrh	r3, [r4, #12]
 80004cc:	0719      	lsls	r1, r3, #28
 80004ce:	d513      	bpl.n	80004f8 <_puts_r+0x50>
 80004d0:	6923      	ldr	r3, [r4, #16]
 80004d2:	b18b      	cbz	r3, 80004f8 <_puts_r+0x50>
 80004d4:	3e01      	subs	r6, #1
 80004d6:	68a3      	ldr	r3, [r4, #8]
 80004d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80004dc:	3b01      	subs	r3, #1
 80004de:	60a3      	str	r3, [r4, #8]
 80004e0:	b9e9      	cbnz	r1, 800051e <_puts_r+0x76>
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	da2e      	bge.n	8000544 <_puts_r+0x9c>
 80004e6:	4622      	mov	r2, r4
 80004e8:	210a      	movs	r1, #10
 80004ea:	4628      	mov	r0, r5
 80004ec:	f000 f87b 	bl	80005e6 <__swbuf_r>
 80004f0:	3001      	adds	r0, #1
 80004f2:	d007      	beq.n	8000504 <_puts_r+0x5c>
 80004f4:	250a      	movs	r5, #10
 80004f6:	e007      	b.n	8000508 <_puts_r+0x60>
 80004f8:	4621      	mov	r1, r4
 80004fa:	4628      	mov	r0, r5
 80004fc:	f000 f8b0 	bl	8000660 <__swsetup_r>
 8000500:	2800      	cmp	r0, #0
 8000502:	d0e7      	beq.n	80004d4 <_puts_r+0x2c>
 8000504:	f04f 35ff 	mov.w	r5, #4294967295
 8000508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800050a:	07da      	lsls	r2, r3, #31
 800050c:	d405      	bmi.n	800051a <_puts_r+0x72>
 800050e:	89a3      	ldrh	r3, [r4, #12]
 8000510:	059b      	lsls	r3, r3, #22
 8000512:	d402      	bmi.n	800051a <_puts_r+0x72>
 8000514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000516:	f000 f974 	bl	8000802 <__retarget_lock_release_recursive>
 800051a:	4628      	mov	r0, r5
 800051c:	bd70      	pop	{r4, r5, r6, pc}
 800051e:	2b00      	cmp	r3, #0
 8000520:	da04      	bge.n	800052c <_puts_r+0x84>
 8000522:	69a2      	ldr	r2, [r4, #24]
 8000524:	429a      	cmp	r2, r3
 8000526:	dc06      	bgt.n	8000536 <_puts_r+0x8e>
 8000528:	290a      	cmp	r1, #10
 800052a:	d004      	beq.n	8000536 <_puts_r+0x8e>
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	1c5a      	adds	r2, r3, #1
 8000530:	6022      	str	r2, [r4, #0]
 8000532:	7019      	strb	r1, [r3, #0]
 8000534:	e7cf      	b.n	80004d6 <_puts_r+0x2e>
 8000536:	4622      	mov	r2, r4
 8000538:	4628      	mov	r0, r5
 800053a:	f000 f854 	bl	80005e6 <__swbuf_r>
 800053e:	3001      	adds	r0, #1
 8000540:	d1c9      	bne.n	80004d6 <_puts_r+0x2e>
 8000542:	e7df      	b.n	8000504 <_puts_r+0x5c>
 8000544:	250a      	movs	r5, #10
 8000546:	6823      	ldr	r3, [r4, #0]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	6022      	str	r2, [r4, #0]
 800054c:	701d      	strb	r5, [r3, #0]
 800054e:	e7db      	b.n	8000508 <_puts_r+0x60>

08000550 <puts>:
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <puts+0xc>)
 8000552:	4601      	mov	r1, r0
 8000554:	6818      	ldr	r0, [r3, #0]
 8000556:	f7ff bfa7 	b.w	80004a8 <_puts_r>
 800055a:	bf00      	nop
 800055c:	20000058 	.word	0x20000058

08000560 <__sread>:
 8000560:	b510      	push	{r4, lr}
 8000562:	460c      	mov	r4, r1
 8000564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000568:	f000 f8fc 	bl	8000764 <_read_r>
 800056c:	2800      	cmp	r0, #0
 800056e:	bfab      	itete	ge
 8000570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000572:	89a3      	ldrhlt	r3, [r4, #12]
 8000574:	181b      	addge	r3, r3, r0
 8000576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800057a:	bfac      	ite	ge
 800057c:	6563      	strge	r3, [r4, #84]	; 0x54
 800057e:	81a3      	strhlt	r3, [r4, #12]
 8000580:	bd10      	pop	{r4, pc}

08000582 <__swrite>:
 8000582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000586:	461f      	mov	r7, r3
 8000588:	898b      	ldrh	r3, [r1, #12]
 800058a:	4605      	mov	r5, r0
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	460c      	mov	r4, r1
 8000590:	4616      	mov	r6, r2
 8000592:	d505      	bpl.n	80005a0 <__swrite+0x1e>
 8000594:	2302      	movs	r3, #2
 8000596:	2200      	movs	r2, #0
 8000598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800059c:	f000 f8d0 	bl	8000740 <_lseek_r>
 80005a0:	89a3      	ldrh	r3, [r4, #12]
 80005a2:	4632      	mov	r2, r6
 80005a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80005a8:	81a3      	strh	r3, [r4, #12]
 80005aa:	4628      	mov	r0, r5
 80005ac:	463b      	mov	r3, r7
 80005ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80005b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80005b6:	f000 b8e7 	b.w	8000788 <_write_r>

080005ba <__sseek>:
 80005ba:	b510      	push	{r4, lr}
 80005bc:	460c      	mov	r4, r1
 80005be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005c2:	f000 f8bd 	bl	8000740 <_lseek_r>
 80005c6:	1c43      	adds	r3, r0, #1
 80005c8:	89a3      	ldrh	r3, [r4, #12]
 80005ca:	bf15      	itete	ne
 80005cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80005ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80005d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80005d6:	81a3      	strheq	r3, [r4, #12]
 80005d8:	bf18      	it	ne
 80005da:	81a3      	strhne	r3, [r4, #12]
 80005dc:	bd10      	pop	{r4, pc}

080005de <__sclose>:
 80005de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80005e2:	f000 b89d 	b.w	8000720 <_close_r>

080005e6 <__swbuf_r>:
 80005e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005e8:	460e      	mov	r6, r1
 80005ea:	4614      	mov	r4, r2
 80005ec:	4605      	mov	r5, r0
 80005ee:	b118      	cbz	r0, 80005f8 <__swbuf_r+0x12>
 80005f0:	6a03      	ldr	r3, [r0, #32]
 80005f2:	b90b      	cbnz	r3, 80005f8 <__swbuf_r+0x12>
 80005f4:	f7ff ff22 	bl	800043c <__sinit>
 80005f8:	69a3      	ldr	r3, [r4, #24]
 80005fa:	60a3      	str	r3, [r4, #8]
 80005fc:	89a3      	ldrh	r3, [r4, #12]
 80005fe:	071a      	lsls	r2, r3, #28
 8000600:	d525      	bpl.n	800064e <__swbuf_r+0x68>
 8000602:	6923      	ldr	r3, [r4, #16]
 8000604:	b31b      	cbz	r3, 800064e <__swbuf_r+0x68>
 8000606:	6823      	ldr	r3, [r4, #0]
 8000608:	6922      	ldr	r2, [r4, #16]
 800060a:	b2f6      	uxtb	r6, r6
 800060c:	1a98      	subs	r0, r3, r2
 800060e:	6963      	ldr	r3, [r4, #20]
 8000610:	4637      	mov	r7, r6
 8000612:	4283      	cmp	r3, r0
 8000614:	dc04      	bgt.n	8000620 <__swbuf_r+0x3a>
 8000616:	4621      	mov	r1, r4
 8000618:	4628      	mov	r0, r5
 800061a:	f000 fa69 	bl	8000af0 <_fflush_r>
 800061e:	b9e0      	cbnz	r0, 800065a <__swbuf_r+0x74>
 8000620:	68a3      	ldr	r3, [r4, #8]
 8000622:	3b01      	subs	r3, #1
 8000624:	60a3      	str	r3, [r4, #8]
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	1c5a      	adds	r2, r3, #1
 800062a:	6022      	str	r2, [r4, #0]
 800062c:	701e      	strb	r6, [r3, #0]
 800062e:	6962      	ldr	r2, [r4, #20]
 8000630:	1c43      	adds	r3, r0, #1
 8000632:	429a      	cmp	r2, r3
 8000634:	d004      	beq.n	8000640 <__swbuf_r+0x5a>
 8000636:	89a3      	ldrh	r3, [r4, #12]
 8000638:	07db      	lsls	r3, r3, #31
 800063a:	d506      	bpl.n	800064a <__swbuf_r+0x64>
 800063c:	2e0a      	cmp	r6, #10
 800063e:	d104      	bne.n	800064a <__swbuf_r+0x64>
 8000640:	4621      	mov	r1, r4
 8000642:	4628      	mov	r0, r5
 8000644:	f000 fa54 	bl	8000af0 <_fflush_r>
 8000648:	b938      	cbnz	r0, 800065a <__swbuf_r+0x74>
 800064a:	4638      	mov	r0, r7
 800064c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800064e:	4621      	mov	r1, r4
 8000650:	4628      	mov	r0, r5
 8000652:	f000 f805 	bl	8000660 <__swsetup_r>
 8000656:	2800      	cmp	r0, #0
 8000658:	d0d5      	beq.n	8000606 <__swbuf_r+0x20>
 800065a:	f04f 37ff 	mov.w	r7, #4294967295
 800065e:	e7f4      	b.n	800064a <__swbuf_r+0x64>

08000660 <__swsetup_r>:
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <__swsetup_r+0xac>)
 8000664:	4605      	mov	r5, r0
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	460c      	mov	r4, r1
 800066a:	b118      	cbz	r0, 8000674 <__swsetup_r+0x14>
 800066c:	6a03      	ldr	r3, [r0, #32]
 800066e:	b90b      	cbnz	r3, 8000674 <__swsetup_r+0x14>
 8000670:	f7ff fee4 	bl	800043c <__sinit>
 8000674:	89a3      	ldrh	r3, [r4, #12]
 8000676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800067a:	0718      	lsls	r0, r3, #28
 800067c:	d422      	bmi.n	80006c4 <__swsetup_r+0x64>
 800067e:	06d9      	lsls	r1, r3, #27
 8000680:	d407      	bmi.n	8000692 <__swsetup_r+0x32>
 8000682:	2309      	movs	r3, #9
 8000684:	602b      	str	r3, [r5, #0]
 8000686:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800068a:	f04f 30ff 	mov.w	r0, #4294967295
 800068e:	81a3      	strh	r3, [r4, #12]
 8000690:	e034      	b.n	80006fc <__swsetup_r+0x9c>
 8000692:	0758      	lsls	r0, r3, #29
 8000694:	d512      	bpl.n	80006bc <__swsetup_r+0x5c>
 8000696:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000698:	b141      	cbz	r1, 80006ac <__swsetup_r+0x4c>
 800069a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800069e:	4299      	cmp	r1, r3
 80006a0:	d002      	beq.n	80006a8 <__swsetup_r+0x48>
 80006a2:	4628      	mov	r0, r5
 80006a4:	f000 f8ae 	bl	8000804 <_free_r>
 80006a8:	2300      	movs	r3, #0
 80006aa:	6363      	str	r3, [r4, #52]	; 0x34
 80006ac:	89a3      	ldrh	r3, [r4, #12]
 80006ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80006b2:	81a3      	strh	r3, [r4, #12]
 80006b4:	2300      	movs	r3, #0
 80006b6:	6063      	str	r3, [r4, #4]
 80006b8:	6923      	ldr	r3, [r4, #16]
 80006ba:	6023      	str	r3, [r4, #0]
 80006bc:	89a3      	ldrh	r3, [r4, #12]
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	81a3      	strh	r3, [r4, #12]
 80006c4:	6923      	ldr	r3, [r4, #16]
 80006c6:	b94b      	cbnz	r3, 80006dc <__swsetup_r+0x7c>
 80006c8:	89a3      	ldrh	r3, [r4, #12]
 80006ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80006ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006d2:	d003      	beq.n	80006dc <__swsetup_r+0x7c>
 80006d4:	4621      	mov	r1, r4
 80006d6:	4628      	mov	r0, r5
 80006d8:	f000 fa57 	bl	8000b8a <__smakebuf_r>
 80006dc:	89a0      	ldrh	r0, [r4, #12]
 80006de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006e2:	f010 0301 	ands.w	r3, r0, #1
 80006e6:	d00a      	beq.n	80006fe <__swsetup_r+0x9e>
 80006e8:	2300      	movs	r3, #0
 80006ea:	60a3      	str	r3, [r4, #8]
 80006ec:	6963      	ldr	r3, [r4, #20]
 80006ee:	425b      	negs	r3, r3
 80006f0:	61a3      	str	r3, [r4, #24]
 80006f2:	6923      	ldr	r3, [r4, #16]
 80006f4:	b943      	cbnz	r3, 8000708 <__swsetup_r+0xa8>
 80006f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80006fa:	d1c4      	bne.n	8000686 <__swsetup_r+0x26>
 80006fc:	bd38      	pop	{r3, r4, r5, pc}
 80006fe:	0781      	lsls	r1, r0, #30
 8000700:	bf58      	it	pl
 8000702:	6963      	ldrpl	r3, [r4, #20]
 8000704:	60a3      	str	r3, [r4, #8]
 8000706:	e7f4      	b.n	80006f2 <__swsetup_r+0x92>
 8000708:	2000      	movs	r0, #0
 800070a:	e7f7      	b.n	80006fc <__swsetup_r+0x9c>
 800070c:	20000058 	.word	0x20000058

08000710 <memset>:
 8000710:	4603      	mov	r3, r0
 8000712:	4402      	add	r2, r0
 8000714:	4293      	cmp	r3, r2
 8000716:	d100      	bne.n	800071a <memset+0xa>
 8000718:	4770      	bx	lr
 800071a:	f803 1b01 	strb.w	r1, [r3], #1
 800071e:	e7f9      	b.n	8000714 <memset+0x4>

08000720 <_close_r>:
 8000720:	b538      	push	{r3, r4, r5, lr}
 8000722:	2300      	movs	r3, #0
 8000724:	4d05      	ldr	r5, [pc, #20]	; (800073c <_close_r+0x1c>)
 8000726:	4604      	mov	r4, r0
 8000728:	4608      	mov	r0, r1
 800072a:	602b      	str	r3, [r5, #0]
 800072c:	f7ff fd7b 	bl	8000226 <_close>
 8000730:	1c43      	adds	r3, r0, #1
 8000732:	d102      	bne.n	800073a <_close_r+0x1a>
 8000734:	682b      	ldr	r3, [r5, #0]
 8000736:	b103      	cbz	r3, 800073a <_close_r+0x1a>
 8000738:	6023      	str	r3, [r4, #0]
 800073a:	bd38      	pop	{r3, r4, r5, pc}
 800073c:	200001b8 	.word	0x200001b8

08000740 <_lseek_r>:
 8000740:	b538      	push	{r3, r4, r5, lr}
 8000742:	4604      	mov	r4, r0
 8000744:	4608      	mov	r0, r1
 8000746:	4611      	mov	r1, r2
 8000748:	2200      	movs	r2, #0
 800074a:	4d05      	ldr	r5, [pc, #20]	; (8000760 <_lseek_r+0x20>)
 800074c:	602a      	str	r2, [r5, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	f7ff fd8d 	bl	800026e <_lseek>
 8000754:	1c43      	adds	r3, r0, #1
 8000756:	d102      	bne.n	800075e <_lseek_r+0x1e>
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	b103      	cbz	r3, 800075e <_lseek_r+0x1e>
 800075c:	6023      	str	r3, [r4, #0]
 800075e:	bd38      	pop	{r3, r4, r5, pc}
 8000760:	200001b8 	.word	0x200001b8

08000764 <_read_r>:
 8000764:	b538      	push	{r3, r4, r5, lr}
 8000766:	4604      	mov	r4, r0
 8000768:	4608      	mov	r0, r1
 800076a:	4611      	mov	r1, r2
 800076c:	2200      	movs	r2, #0
 800076e:	4d05      	ldr	r5, [pc, #20]	; (8000784 <_read_r+0x20>)
 8000770:	602a      	str	r2, [r5, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	f7ff fd1e 	bl	80001b4 <_read>
 8000778:	1c43      	adds	r3, r0, #1
 800077a:	d102      	bne.n	8000782 <_read_r+0x1e>
 800077c:	682b      	ldr	r3, [r5, #0]
 800077e:	b103      	cbz	r3, 8000782 <_read_r+0x1e>
 8000780:	6023      	str	r3, [r4, #0]
 8000782:	bd38      	pop	{r3, r4, r5, pc}
 8000784:	200001b8 	.word	0x200001b8

08000788 <_write_r>:
 8000788:	b538      	push	{r3, r4, r5, lr}
 800078a:	4604      	mov	r4, r0
 800078c:	4608      	mov	r0, r1
 800078e:	4611      	mov	r1, r2
 8000790:	2200      	movs	r2, #0
 8000792:	4d05      	ldr	r5, [pc, #20]	; (80007a8 <_write_r+0x20>)
 8000794:	602a      	str	r2, [r5, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	f7ff fd29 	bl	80001ee <_write>
 800079c:	1c43      	adds	r3, r0, #1
 800079e:	d102      	bne.n	80007a6 <_write_r+0x1e>
 80007a0:	682b      	ldr	r3, [r5, #0]
 80007a2:	b103      	cbz	r3, 80007a6 <_write_r+0x1e>
 80007a4:	6023      	str	r3, [r4, #0]
 80007a6:	bd38      	pop	{r3, r4, r5, pc}
 80007a8:	200001b8 	.word	0x200001b8

080007ac <__errno>:
 80007ac:	4b01      	ldr	r3, [pc, #4]	; (80007b4 <__errno+0x8>)
 80007ae:	6818      	ldr	r0, [r3, #0]
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	20000058 	.word	0x20000058

080007b8 <__libc_init_array>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	2600      	movs	r6, #0
 80007bc:	4d0c      	ldr	r5, [pc, #48]	; (80007f0 <__libc_init_array+0x38>)
 80007be:	4c0d      	ldr	r4, [pc, #52]	; (80007f4 <__libc_init_array+0x3c>)
 80007c0:	1b64      	subs	r4, r4, r5
 80007c2:	10a4      	asrs	r4, r4, #2
 80007c4:	42a6      	cmp	r6, r4
 80007c6:	d109      	bne.n	80007dc <__libc_init_array+0x24>
 80007c8:	f000 fa4e 	bl	8000c68 <_init>
 80007cc:	2600      	movs	r6, #0
 80007ce:	4d0a      	ldr	r5, [pc, #40]	; (80007f8 <__libc_init_array+0x40>)
 80007d0:	4c0a      	ldr	r4, [pc, #40]	; (80007fc <__libc_init_array+0x44>)
 80007d2:	1b64      	subs	r4, r4, r5
 80007d4:	10a4      	asrs	r4, r4, #2
 80007d6:	42a6      	cmp	r6, r4
 80007d8:	d105      	bne.n	80007e6 <__libc_init_array+0x2e>
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e0:	4798      	blx	r3
 80007e2:	3601      	adds	r6, #1
 80007e4:	e7ee      	b.n	80007c4 <__libc_init_array+0xc>
 80007e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ea:	4798      	blx	r3
 80007ec:	3601      	adds	r6, #1
 80007ee:	e7f2      	b.n	80007d6 <__libc_init_array+0x1e>
 80007f0:	08000c90 	.word	0x08000c90
 80007f4:	08000c90 	.word	0x08000c90
 80007f8:	08000c90 	.word	0x08000c90
 80007fc:	08000c94 	.word	0x08000c94

08000800 <__retarget_lock_acquire_recursive>:
 8000800:	4770      	bx	lr

08000802 <__retarget_lock_release_recursive>:
 8000802:	4770      	bx	lr

08000804 <_free_r>:
 8000804:	b538      	push	{r3, r4, r5, lr}
 8000806:	4605      	mov	r5, r0
 8000808:	2900      	cmp	r1, #0
 800080a:	d040      	beq.n	800088e <_free_r+0x8a>
 800080c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000810:	1f0c      	subs	r4, r1, #4
 8000812:	2b00      	cmp	r3, #0
 8000814:	bfb8      	it	lt
 8000816:	18e4      	addlt	r4, r4, r3
 8000818:	f000 f8dc 	bl	80009d4 <__malloc_lock>
 800081c:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <_free_r+0x8c>)
 800081e:	6813      	ldr	r3, [r2, #0]
 8000820:	b933      	cbnz	r3, 8000830 <_free_r+0x2c>
 8000822:	6063      	str	r3, [r4, #4]
 8000824:	6014      	str	r4, [r2, #0]
 8000826:	4628      	mov	r0, r5
 8000828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800082c:	f000 b8d8 	b.w	80009e0 <__malloc_unlock>
 8000830:	42a3      	cmp	r3, r4
 8000832:	d908      	bls.n	8000846 <_free_r+0x42>
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	1821      	adds	r1, r4, r0
 8000838:	428b      	cmp	r3, r1
 800083a:	bf01      	itttt	eq
 800083c:	6819      	ldreq	r1, [r3, #0]
 800083e:	685b      	ldreq	r3, [r3, #4]
 8000840:	1809      	addeq	r1, r1, r0
 8000842:	6021      	streq	r1, [r4, #0]
 8000844:	e7ed      	b.n	8000822 <_free_r+0x1e>
 8000846:	461a      	mov	r2, r3
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	b10b      	cbz	r3, 8000850 <_free_r+0x4c>
 800084c:	42a3      	cmp	r3, r4
 800084e:	d9fa      	bls.n	8000846 <_free_r+0x42>
 8000850:	6811      	ldr	r1, [r2, #0]
 8000852:	1850      	adds	r0, r2, r1
 8000854:	42a0      	cmp	r0, r4
 8000856:	d10b      	bne.n	8000870 <_free_r+0x6c>
 8000858:	6820      	ldr	r0, [r4, #0]
 800085a:	4401      	add	r1, r0
 800085c:	1850      	adds	r0, r2, r1
 800085e:	4283      	cmp	r3, r0
 8000860:	6011      	str	r1, [r2, #0]
 8000862:	d1e0      	bne.n	8000826 <_free_r+0x22>
 8000864:	6818      	ldr	r0, [r3, #0]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	4408      	add	r0, r1
 800086a:	6010      	str	r0, [r2, #0]
 800086c:	6053      	str	r3, [r2, #4]
 800086e:	e7da      	b.n	8000826 <_free_r+0x22>
 8000870:	d902      	bls.n	8000878 <_free_r+0x74>
 8000872:	230c      	movs	r3, #12
 8000874:	602b      	str	r3, [r5, #0]
 8000876:	e7d6      	b.n	8000826 <_free_r+0x22>
 8000878:	6820      	ldr	r0, [r4, #0]
 800087a:	1821      	adds	r1, r4, r0
 800087c:	428b      	cmp	r3, r1
 800087e:	bf01      	itttt	eq
 8000880:	6819      	ldreq	r1, [r3, #0]
 8000882:	685b      	ldreq	r3, [r3, #4]
 8000884:	1809      	addeq	r1, r1, r0
 8000886:	6021      	streq	r1, [r4, #0]
 8000888:	6063      	str	r3, [r4, #4]
 800088a:	6054      	str	r4, [r2, #4]
 800088c:	e7cb      	b.n	8000826 <_free_r+0x22>
 800088e:	bd38      	pop	{r3, r4, r5, pc}
 8000890:	200001c0 	.word	0x200001c0

08000894 <sbrk_aligned>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	4e0e      	ldr	r6, [pc, #56]	; (80008d0 <sbrk_aligned+0x3c>)
 8000898:	460c      	mov	r4, r1
 800089a:	6831      	ldr	r1, [r6, #0]
 800089c:	4605      	mov	r5, r0
 800089e:	b911      	cbnz	r1, 80008a6 <sbrk_aligned+0x12>
 80008a0:	f000 f9d2 	bl	8000c48 <_sbrk_r>
 80008a4:	6030      	str	r0, [r6, #0]
 80008a6:	4621      	mov	r1, r4
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 f9cd 	bl	8000c48 <_sbrk_r>
 80008ae:	1c43      	adds	r3, r0, #1
 80008b0:	d00a      	beq.n	80008c8 <sbrk_aligned+0x34>
 80008b2:	1cc4      	adds	r4, r0, #3
 80008b4:	f024 0403 	bic.w	r4, r4, #3
 80008b8:	42a0      	cmp	r0, r4
 80008ba:	d007      	beq.n	80008cc <sbrk_aligned+0x38>
 80008bc:	1a21      	subs	r1, r4, r0
 80008be:	4628      	mov	r0, r5
 80008c0:	f000 f9c2 	bl	8000c48 <_sbrk_r>
 80008c4:	3001      	adds	r0, #1
 80008c6:	d101      	bne.n	80008cc <sbrk_aligned+0x38>
 80008c8:	f04f 34ff 	mov.w	r4, #4294967295
 80008cc:	4620      	mov	r0, r4
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	200001c4 	.word	0x200001c4

080008d4 <_malloc_r>:
 80008d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d8:	1ccd      	adds	r5, r1, #3
 80008da:	f025 0503 	bic.w	r5, r5, #3
 80008de:	3508      	adds	r5, #8
 80008e0:	2d0c      	cmp	r5, #12
 80008e2:	bf38      	it	cc
 80008e4:	250c      	movcc	r5, #12
 80008e6:	2d00      	cmp	r5, #0
 80008e8:	4607      	mov	r7, r0
 80008ea:	db01      	blt.n	80008f0 <_malloc_r+0x1c>
 80008ec:	42a9      	cmp	r1, r5
 80008ee:	d905      	bls.n	80008fc <_malloc_r+0x28>
 80008f0:	230c      	movs	r3, #12
 80008f2:	2600      	movs	r6, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4630      	mov	r0, r6
 80008f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80009d0 <_malloc_r+0xfc>
 8000900:	f000 f868 	bl	80009d4 <__malloc_lock>
 8000904:	f8d8 3000 	ldr.w	r3, [r8]
 8000908:	461c      	mov	r4, r3
 800090a:	bb5c      	cbnz	r4, 8000964 <_malloc_r+0x90>
 800090c:	4629      	mov	r1, r5
 800090e:	4638      	mov	r0, r7
 8000910:	f7ff ffc0 	bl	8000894 <sbrk_aligned>
 8000914:	1c43      	adds	r3, r0, #1
 8000916:	4604      	mov	r4, r0
 8000918:	d155      	bne.n	80009c6 <_malloc_r+0xf2>
 800091a:	f8d8 4000 	ldr.w	r4, [r8]
 800091e:	4626      	mov	r6, r4
 8000920:	2e00      	cmp	r6, #0
 8000922:	d145      	bne.n	80009b0 <_malloc_r+0xdc>
 8000924:	2c00      	cmp	r4, #0
 8000926:	d048      	beq.n	80009ba <_malloc_r+0xe6>
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	4631      	mov	r1, r6
 800092c:	4638      	mov	r0, r7
 800092e:	eb04 0903 	add.w	r9, r4, r3
 8000932:	f000 f989 	bl	8000c48 <_sbrk_r>
 8000936:	4581      	cmp	r9, r0
 8000938:	d13f      	bne.n	80009ba <_malloc_r+0xe6>
 800093a:	6821      	ldr	r1, [r4, #0]
 800093c:	4638      	mov	r0, r7
 800093e:	1a6d      	subs	r5, r5, r1
 8000940:	4629      	mov	r1, r5
 8000942:	f7ff ffa7 	bl	8000894 <sbrk_aligned>
 8000946:	3001      	adds	r0, #1
 8000948:	d037      	beq.n	80009ba <_malloc_r+0xe6>
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	442b      	add	r3, r5
 800094e:	6023      	str	r3, [r4, #0]
 8000950:	f8d8 3000 	ldr.w	r3, [r8]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d038      	beq.n	80009ca <_malloc_r+0xf6>
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	42a2      	cmp	r2, r4
 800095c:	d12b      	bne.n	80009b6 <_malloc_r+0xe2>
 800095e:	2200      	movs	r2, #0
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	e00f      	b.n	8000984 <_malloc_r+0xb0>
 8000964:	6822      	ldr	r2, [r4, #0]
 8000966:	1b52      	subs	r2, r2, r5
 8000968:	d41f      	bmi.n	80009aa <_malloc_r+0xd6>
 800096a:	2a0b      	cmp	r2, #11
 800096c:	d917      	bls.n	800099e <_malloc_r+0xca>
 800096e:	1961      	adds	r1, r4, r5
 8000970:	42a3      	cmp	r3, r4
 8000972:	6025      	str	r5, [r4, #0]
 8000974:	bf18      	it	ne
 8000976:	6059      	strne	r1, [r3, #4]
 8000978:	6863      	ldr	r3, [r4, #4]
 800097a:	bf08      	it	eq
 800097c:	f8c8 1000 	streq.w	r1, [r8]
 8000980:	5162      	str	r2, [r4, r5]
 8000982:	604b      	str	r3, [r1, #4]
 8000984:	4638      	mov	r0, r7
 8000986:	f104 060b 	add.w	r6, r4, #11
 800098a:	f000 f829 	bl	80009e0 <__malloc_unlock>
 800098e:	f026 0607 	bic.w	r6, r6, #7
 8000992:	1d23      	adds	r3, r4, #4
 8000994:	1af2      	subs	r2, r6, r3
 8000996:	d0ae      	beq.n	80008f6 <_malloc_r+0x22>
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	50a3      	str	r3, [r4, r2]
 800099c:	e7ab      	b.n	80008f6 <_malloc_r+0x22>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	6862      	ldr	r2, [r4, #4]
 80009a2:	d1dd      	bne.n	8000960 <_malloc_r+0x8c>
 80009a4:	f8c8 2000 	str.w	r2, [r8]
 80009a8:	e7ec      	b.n	8000984 <_malloc_r+0xb0>
 80009aa:	4623      	mov	r3, r4
 80009ac:	6864      	ldr	r4, [r4, #4]
 80009ae:	e7ac      	b.n	800090a <_malloc_r+0x36>
 80009b0:	4634      	mov	r4, r6
 80009b2:	6876      	ldr	r6, [r6, #4]
 80009b4:	e7b4      	b.n	8000920 <_malloc_r+0x4c>
 80009b6:	4613      	mov	r3, r2
 80009b8:	e7cc      	b.n	8000954 <_malloc_r+0x80>
 80009ba:	230c      	movs	r3, #12
 80009bc:	4638      	mov	r0, r7
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	f000 f80e 	bl	80009e0 <__malloc_unlock>
 80009c4:	e797      	b.n	80008f6 <_malloc_r+0x22>
 80009c6:	6025      	str	r5, [r4, #0]
 80009c8:	e7dc      	b.n	8000984 <_malloc_r+0xb0>
 80009ca:	605b      	str	r3, [r3, #4]
 80009cc:	deff      	udf	#255	; 0xff
 80009ce:	bf00      	nop
 80009d0:	200001c0 	.word	0x200001c0

080009d4 <__malloc_lock>:
 80009d4:	4801      	ldr	r0, [pc, #4]	; (80009dc <__malloc_lock+0x8>)
 80009d6:	f7ff bf13 	b.w	8000800 <__retarget_lock_acquire_recursive>
 80009da:	bf00      	nop
 80009dc:	200001bc 	.word	0x200001bc

080009e0 <__malloc_unlock>:
 80009e0:	4801      	ldr	r0, [pc, #4]	; (80009e8 <__malloc_unlock+0x8>)
 80009e2:	f7ff bf0e 	b.w	8000802 <__retarget_lock_release_recursive>
 80009e6:	bf00      	nop
 80009e8:	200001bc 	.word	0x200001bc

080009ec <__sflush_r>:
 80009ec:	898a      	ldrh	r2, [r1, #12]
 80009ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f0:	4605      	mov	r5, r0
 80009f2:	0710      	lsls	r0, r2, #28
 80009f4:	460c      	mov	r4, r1
 80009f6:	d457      	bmi.n	8000aa8 <__sflush_r+0xbc>
 80009f8:	684b      	ldr	r3, [r1, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dc04      	bgt.n	8000a08 <__sflush_r+0x1c>
 80009fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	dc01      	bgt.n	8000a08 <__sflush_r+0x1c>
 8000a04:	2000      	movs	r0, #0
 8000a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d0fa      	beq.n	8000a04 <__sflush_r+0x18>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a14:	682f      	ldr	r7, [r5, #0]
 8000a16:	6a21      	ldr	r1, [r4, #32]
 8000a18:	602b      	str	r3, [r5, #0]
 8000a1a:	d032      	beq.n	8000a82 <__sflush_r+0x96>
 8000a1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a1e:	89a3      	ldrh	r3, [r4, #12]
 8000a20:	075a      	lsls	r2, r3, #29
 8000a22:	d505      	bpl.n	8000a30 <__sflush_r+0x44>
 8000a24:	6863      	ldr	r3, [r4, #4]
 8000a26:	1ac0      	subs	r0, r0, r3
 8000a28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a2a:	b10b      	cbz	r3, 8000a30 <__sflush_r+0x44>
 8000a2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a2e:	1ac0      	subs	r0, r0, r3
 8000a30:	2300      	movs	r3, #0
 8000a32:	4602      	mov	r2, r0
 8000a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a36:	4628      	mov	r0, r5
 8000a38:	6a21      	ldr	r1, [r4, #32]
 8000a3a:	47b0      	blx	r6
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	d106      	bne.n	8000a50 <__sflush_r+0x64>
 8000a42:	6829      	ldr	r1, [r5, #0]
 8000a44:	291d      	cmp	r1, #29
 8000a46:	d82b      	bhi.n	8000aa0 <__sflush_r+0xb4>
 8000a48:	4a28      	ldr	r2, [pc, #160]	; (8000aec <__sflush_r+0x100>)
 8000a4a:	410a      	asrs	r2, r1
 8000a4c:	07d6      	lsls	r6, r2, #31
 8000a4e:	d427      	bmi.n	8000aa0 <__sflush_r+0xb4>
 8000a50:	2200      	movs	r2, #0
 8000a52:	6062      	str	r2, [r4, #4]
 8000a54:	6922      	ldr	r2, [r4, #16]
 8000a56:	04d9      	lsls	r1, r3, #19
 8000a58:	6022      	str	r2, [r4, #0]
 8000a5a:	d504      	bpl.n	8000a66 <__sflush_r+0x7a>
 8000a5c:	1c42      	adds	r2, r0, #1
 8000a5e:	d101      	bne.n	8000a64 <__sflush_r+0x78>
 8000a60:	682b      	ldr	r3, [r5, #0]
 8000a62:	b903      	cbnz	r3, 8000a66 <__sflush_r+0x7a>
 8000a64:	6560      	str	r0, [r4, #84]	; 0x54
 8000a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a68:	602f      	str	r7, [r5, #0]
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d0ca      	beq.n	8000a04 <__sflush_r+0x18>
 8000a6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a72:	4299      	cmp	r1, r3
 8000a74:	d002      	beq.n	8000a7c <__sflush_r+0x90>
 8000a76:	4628      	mov	r0, r5
 8000a78:	f7ff fec4 	bl	8000804 <_free_r>
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	6360      	str	r0, [r4, #52]	; 0x34
 8000a80:	e7c1      	b.n	8000a06 <__sflush_r+0x1a>
 8000a82:	2301      	movs	r3, #1
 8000a84:	4628      	mov	r0, r5
 8000a86:	47b0      	blx	r6
 8000a88:	1c41      	adds	r1, r0, #1
 8000a8a:	d1c8      	bne.n	8000a1e <__sflush_r+0x32>
 8000a8c:	682b      	ldr	r3, [r5, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0c5      	beq.n	8000a1e <__sflush_r+0x32>
 8000a92:	2b1d      	cmp	r3, #29
 8000a94:	d001      	beq.n	8000a9a <__sflush_r+0xae>
 8000a96:	2b16      	cmp	r3, #22
 8000a98:	d101      	bne.n	8000a9e <__sflush_r+0xb2>
 8000a9a:	602f      	str	r7, [r5, #0]
 8000a9c:	e7b2      	b.n	8000a04 <__sflush_r+0x18>
 8000a9e:	89a3      	ldrh	r3, [r4, #12]
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	81a3      	strh	r3, [r4, #12]
 8000aa6:	e7ae      	b.n	8000a06 <__sflush_r+0x1a>
 8000aa8:	690f      	ldr	r7, [r1, #16]
 8000aaa:	2f00      	cmp	r7, #0
 8000aac:	d0aa      	beq.n	8000a04 <__sflush_r+0x18>
 8000aae:	0793      	lsls	r3, r2, #30
 8000ab0:	bf18      	it	ne
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	680e      	ldr	r6, [r1, #0]
 8000ab6:	bf08      	it	eq
 8000ab8:	694b      	ldreq	r3, [r1, #20]
 8000aba:	1bf6      	subs	r6, r6, r7
 8000abc:	600f      	str	r7, [r1, #0]
 8000abe:	608b      	str	r3, [r1, #8]
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	dd9f      	ble.n	8000a04 <__sflush_r+0x18>
 8000ac4:	4633      	mov	r3, r6
 8000ac6:	463a      	mov	r2, r7
 8000ac8:	4628      	mov	r0, r5
 8000aca:	6a21      	ldr	r1, [r4, #32]
 8000acc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000ad0:	47e0      	blx	ip
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	dc06      	bgt.n	8000ae4 <__sflush_r+0xf8>
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	81a3      	strh	r3, [r4, #12]
 8000ae2:	e790      	b.n	8000a06 <__sflush_r+0x1a>
 8000ae4:	4407      	add	r7, r0
 8000ae6:	1a36      	subs	r6, r6, r0
 8000ae8:	e7ea      	b.n	8000ac0 <__sflush_r+0xd4>
 8000aea:	bf00      	nop
 8000aec:	dfbffffe 	.word	0xdfbffffe

08000af0 <_fflush_r>:
 8000af0:	b538      	push	{r3, r4, r5, lr}
 8000af2:	690b      	ldr	r3, [r1, #16]
 8000af4:	4605      	mov	r5, r0
 8000af6:	460c      	mov	r4, r1
 8000af8:	b913      	cbnz	r3, 8000b00 <_fflush_r+0x10>
 8000afa:	2500      	movs	r5, #0
 8000afc:	4628      	mov	r0, r5
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
 8000b00:	b118      	cbz	r0, 8000b0a <_fflush_r+0x1a>
 8000b02:	6a03      	ldr	r3, [r0, #32]
 8000b04:	b90b      	cbnz	r3, 8000b0a <_fflush_r+0x1a>
 8000b06:	f7ff fc99 	bl	800043c <__sinit>
 8000b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f3      	beq.n	8000afa <_fflush_r+0xa>
 8000b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b14:	07d0      	lsls	r0, r2, #31
 8000b16:	d404      	bmi.n	8000b22 <_fflush_r+0x32>
 8000b18:	0599      	lsls	r1, r3, #22
 8000b1a:	d402      	bmi.n	8000b22 <_fflush_r+0x32>
 8000b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1e:	f7ff fe6f 	bl	8000800 <__retarget_lock_acquire_recursive>
 8000b22:	4628      	mov	r0, r5
 8000b24:	4621      	mov	r1, r4
 8000b26:	f7ff ff61 	bl	80009ec <__sflush_r>
 8000b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b2c:	4605      	mov	r5, r0
 8000b2e:	07da      	lsls	r2, r3, #31
 8000b30:	d4e4      	bmi.n	8000afc <_fflush_r+0xc>
 8000b32:	89a3      	ldrh	r3, [r4, #12]
 8000b34:	059b      	lsls	r3, r3, #22
 8000b36:	d4e1      	bmi.n	8000afc <_fflush_r+0xc>
 8000b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b3a:	f7ff fe62 	bl	8000802 <__retarget_lock_release_recursive>
 8000b3e:	e7dd      	b.n	8000afc <_fflush_r+0xc>

08000b40 <__swhatbuf_r>:
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	460c      	mov	r4, r1
 8000b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b48:	4615      	mov	r5, r2
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	461e      	mov	r6, r3
 8000b4e:	b096      	sub	sp, #88	; 0x58
 8000b50:	da0c      	bge.n	8000b6c <__swhatbuf_r+0x2c>
 8000b52:	89a3      	ldrh	r3, [r4, #12]
 8000b54:	2100      	movs	r1, #0
 8000b56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000b5a:	bf0c      	ite	eq
 8000b5c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000b60:	2340      	movne	r3, #64	; 0x40
 8000b62:	2000      	movs	r0, #0
 8000b64:	6031      	str	r1, [r6, #0]
 8000b66:	602b      	str	r3, [r5, #0]
 8000b68:	b016      	add	sp, #88	; 0x58
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}
 8000b6c:	466a      	mov	r2, sp
 8000b6e:	f000 f849 	bl	8000c04 <_fstat_r>
 8000b72:	2800      	cmp	r0, #0
 8000b74:	dbed      	blt.n	8000b52 <__swhatbuf_r+0x12>
 8000b76:	9901      	ldr	r1, [sp, #4]
 8000b78:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000b7c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000b80:	4259      	negs	r1, r3
 8000b82:	4159      	adcs	r1, r3
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b88:	e7eb      	b.n	8000b62 <__swhatbuf_r+0x22>

08000b8a <__smakebuf_r>:
 8000b8a:	898b      	ldrh	r3, [r1, #12]
 8000b8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b8e:	079d      	lsls	r5, r3, #30
 8000b90:	4606      	mov	r6, r0
 8000b92:	460c      	mov	r4, r1
 8000b94:	d507      	bpl.n	8000ba6 <__smakebuf_r+0x1c>
 8000b96:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b9a:	6023      	str	r3, [r4, #0]
 8000b9c:	6123      	str	r3, [r4, #16]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	6163      	str	r3, [r4, #20]
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
 8000ba6:	466a      	mov	r2, sp
 8000ba8:	ab01      	add	r3, sp, #4
 8000baa:	f7ff ffc9 	bl	8000b40 <__swhatbuf_r>
 8000bae:	9900      	ldr	r1, [sp, #0]
 8000bb0:	4605      	mov	r5, r0
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f7ff fe8e 	bl	80008d4 <_malloc_r>
 8000bb8:	b948      	cbnz	r0, 8000bce <__smakebuf_r+0x44>
 8000bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bbe:	059a      	lsls	r2, r3, #22
 8000bc0:	d4ef      	bmi.n	8000ba2 <__smakebuf_r+0x18>
 8000bc2:	f023 0303 	bic.w	r3, r3, #3
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	81a3      	strh	r3, [r4, #12]
 8000bcc:	e7e3      	b.n	8000b96 <__smakebuf_r+0xc>
 8000bce:	89a3      	ldrh	r3, [r4, #12]
 8000bd0:	6020      	str	r0, [r4, #0]
 8000bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd6:	81a3      	strh	r3, [r4, #12]
 8000bd8:	9b00      	ldr	r3, [sp, #0]
 8000bda:	6120      	str	r0, [r4, #16]
 8000bdc:	6163      	str	r3, [r4, #20]
 8000bde:	9b01      	ldr	r3, [sp, #4]
 8000be0:	b15b      	cbz	r3, 8000bfa <__smakebuf_r+0x70>
 8000be2:	4630      	mov	r0, r6
 8000be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000be8:	f000 f81e 	bl	8000c28 <_isatty_r>
 8000bec:	b128      	cbz	r0, 8000bfa <__smakebuf_r+0x70>
 8000bee:	89a3      	ldrh	r3, [r4, #12]
 8000bf0:	f023 0303 	bic.w	r3, r3, #3
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	81a3      	strh	r3, [r4, #12]
 8000bfa:	89a3      	ldrh	r3, [r4, #12]
 8000bfc:	431d      	orrs	r5, r3
 8000bfe:	81a5      	strh	r5, [r4, #12]
 8000c00:	e7cf      	b.n	8000ba2 <__smakebuf_r+0x18>
	...

08000c04 <_fstat_r>:
 8000c04:	b538      	push	{r3, r4, r5, lr}
 8000c06:	2300      	movs	r3, #0
 8000c08:	4d06      	ldr	r5, [pc, #24]	; (8000c24 <_fstat_r+0x20>)
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	4611      	mov	r1, r2
 8000c10:	602b      	str	r3, [r5, #0]
 8000c12:	f7ff fb13 	bl	800023c <_fstat>
 8000c16:	1c43      	adds	r3, r0, #1
 8000c18:	d102      	bne.n	8000c20 <_fstat_r+0x1c>
 8000c1a:	682b      	ldr	r3, [r5, #0]
 8000c1c:	b103      	cbz	r3, 8000c20 <_fstat_r+0x1c>
 8000c1e:	6023      	str	r3, [r4, #0]
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
 8000c22:	bf00      	nop
 8000c24:	200001b8 	.word	0x200001b8

08000c28 <_isatty_r>:
 8000c28:	b538      	push	{r3, r4, r5, lr}
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	4d05      	ldr	r5, [pc, #20]	; (8000c44 <_isatty_r+0x1c>)
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	602b      	str	r3, [r5, #0]
 8000c34:	f7ff fb11 	bl	800025a <_isatty>
 8000c38:	1c43      	adds	r3, r0, #1
 8000c3a:	d102      	bne.n	8000c42 <_isatty_r+0x1a>
 8000c3c:	682b      	ldr	r3, [r5, #0]
 8000c3e:	b103      	cbz	r3, 8000c42 <_isatty_r+0x1a>
 8000c40:	6023      	str	r3, [r4, #0]
 8000c42:	bd38      	pop	{r3, r4, r5, pc}
 8000c44:	200001b8 	.word	0x200001b8

08000c48 <_sbrk_r>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	4d05      	ldr	r5, [pc, #20]	; (8000c64 <_sbrk_r+0x1c>)
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4608      	mov	r0, r1
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	f7ff fb18 	bl	8000288 <_sbrk>
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	d102      	bne.n	8000c62 <_sbrk_r+0x1a>
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	b103      	cbz	r3, 8000c62 <_sbrk_r+0x1a>
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
 8000c64:	200001b8 	.word	0x200001b8

08000c68 <_init>:
 8000c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6a:	bf00      	nop
 8000c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6e:	bc08      	pop	{r3}
 8000c70:	469e      	mov	lr, r3
 8000c72:	4770      	bx	lr

08000c74 <_fini>:
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c76:	bf00      	nop
 8000c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7a:	bc08      	pop	{r3}
 8000c7c:	469e      	mov	lr, r3
 8000c7e:	4770      	bx	lr
