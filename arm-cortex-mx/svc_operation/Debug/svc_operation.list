
svc_operation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001278  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080013a8  080013a8  000113a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001458  08001458  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001458  08001458  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001458  08001458  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001458  08001458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800145c  0800145c  0001145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080014bc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080014bc  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aa4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003c3  00000000  00000000  00020b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  00020f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dd  00000000  00000000  00021070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c71  00000000  00000000  0002114d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014e2  00000000  00000000  00023dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000974a  00000000  00000000  000252a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c14  00000000  00000000  0002e9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0002f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001390 	.word	0x08001390

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001390 	.word	0x08001390

08000170 <add_numbers>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

//SVC 36 = ADD, SVC 37 = SUB, SVC 38 = MUL, SVC 39 = DIV

int32_t add_numbers(int32_t x, int32_t y){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

	int32_t res;

	__asm volatile("SVC #36"); //If it is 36 then add the numbers.
 800017a:	df24      	svc	36	; 0x24
	__asm volatile("MOV %0,R0":"=r"(res):);
 800017c:	4603      	mov	r3, r0
 800017e:	60fb      	str	r3, [r7, #12]
	return res;
 8000180:	68fb      	ldr	r3, [r7, #12]
}
 8000182:	4618      	mov	r0, r3
 8000184:	3714      	adds	r7, #20
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <sub_numbers>:

int32_t sub_numbers(int32_t x, int32_t y){
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]

	int32_t res;

	__asm volatile("SVC #37");
 8000196:	df25      	svc	37	; 0x25
	__asm volatile("MOV %0,R0":"=r"(res):);
 8000198:	4603      	mov	r3, r0
 800019a:	60fb      	str	r3, [r7, #12]
	return res;
 800019c:	68fb      	ldr	r3, [r7, #12]
}
 800019e:	4618      	mov	r0, r3
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <mul_numbers>:

int32_t mul_numbers(int32_t x, int32_t y){
 80001a8:	b480      	push	{r7}
 80001aa:	b085      	sub	sp, #20
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	6078      	str	r0, [r7, #4]
 80001b0:	6039      	str	r1, [r7, #0]

	int32_t res;

	__asm volatile("SVC #38");
 80001b2:	df26      	svc	38	; 0x26
	__asm volatile("MOV %0,R0":"=r"(res):);
 80001b4:	4603      	mov	r3, r0
 80001b6:	60fb      	str	r3, [r7, #12]
	return res;
 80001b8:	68fb      	ldr	r3, [r7, #12]
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3714      	adds	r7, #20
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <div_numbers>:

int32_t div_numbers(int32_t x, int32_t y){
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]

	int32_t res;

	__asm volatile("SVC #39");
 80001ce:	df27      	svc	39	; 0x27
	__asm volatile("MOV %0,R0":"=r"(res):);
 80001d0:	4603      	mov	r3, r0
 80001d2:	60fb      	str	r3, [r7, #12]
	return res;
 80001d4:	68fb      	ldr	r3, [r7, #12]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3714      	adds	r7, #20
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <main>:

int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
	uint32_t res;

	res = add_numbers(40, -90);
 80001e6:	f06f 0159 	mvn.w	r1, #89	; 0x59
 80001ea:	2028      	movs	r0, #40	; 0x28
 80001ec:	f7ff ffc0 	bl	8000170 <add_numbers>
 80001f0:	4603      	mov	r3, r0
 80001f2:	607b      	str	r3, [r7, #4]
	printf("Add result = %ld\n", res);
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4812      	ldr	r0, [pc, #72]	; (8000240 <main+0x60>)
 80001f8:	f000 f9f4 	bl	80005e4 <iprintf>

	res = sub_numbers(25, 150);
 80001fc:	2196      	movs	r1, #150	; 0x96
 80001fe:	2019      	movs	r0, #25
 8000200:	f7ff ffc4 	bl	800018c <sub_numbers>
 8000204:	4603      	mov	r3, r0
 8000206:	607b      	str	r3, [r7, #4]
	printf("Sub result = %ld\n", res);
 8000208:	6879      	ldr	r1, [r7, #4]
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <main+0x64>)
 800020c:	f000 f9ea 	bl	80005e4 <iprintf>

	res = mul_numbers(374, 890);
 8000210:	f240 317a 	movw	r1, #890	; 0x37a
 8000214:	f44f 70bb 	mov.w	r0, #374	; 0x176
 8000218:	f7ff ffc6 	bl	80001a8 <mul_numbers>
 800021c:	4603      	mov	r3, r0
 800021e:	607b      	str	r3, [r7, #4]
	printf("Mul result = %ld\n", res);
 8000220:	6879      	ldr	r1, [r7, #4]
 8000222:	4809      	ldr	r0, [pc, #36]	; (8000248 <main+0x68>)
 8000224:	f000 f9de 	bl	80005e4 <iprintf>

	res = div_numbers(67, -3);
 8000228:	f06f 0102 	mvn.w	r1, #2
 800022c:	2043      	movs	r0, #67	; 0x43
 800022e:	f7ff ffc9 	bl	80001c4 <div_numbers>
 8000232:	4603      	mov	r3, r0
 8000234:	607b      	str	r3, [r7, #4]
	printf("Div result = %ld\n", res);
 8000236:	6879      	ldr	r1, [r7, #4]
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <main+0x6c>)
 800023a:	f000 f9d3 	bl	80005e4 <iprintf>

	for(;;);
 800023e:	e7fe      	b.n	800023e <main+0x5e>
 8000240:	080013a8 	.word	0x080013a8
 8000244:	080013bc 	.word	0x080013bc
 8000248:	080013d0 	.word	0x080013d0
 800024c:	080013e4 	.word	0x080013e4

08000250 <SVC_Handler>:
}

__attribute__ ((naked)) void SVC_Handler(){

	__asm("MRS R0,MSP");
 8000250:	f3ef 8008 	mrs	r0, MSP
	__asm("B SVC_Handler_c");
 8000254:	f000 b802 	b.w	800025c <SVC_Handler_c>

}
 8000258:	bf00      	nop
	...

0800025c <SVC_Handler_c>:

void SVC_Handler_c(uint32_t *pBaseOfStackFrame){
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]

	uint32_t arg0, arg1, res;

	uint32_t *pReturn_addr = (uint32_t*) pBaseOfStackFrame[6];
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3318      	adds	r3, #24
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	61bb      	str	r3, [r7, #24]

	//Decrement the return address by 2 to point to
	//opcode of the SVC instruction in the program memory
	pReturn_addr-=2;
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	3b08      	subs	r3, #8
 8000270:	61bb      	str	r3, [r7, #24]

	//Extract the SVC number (LSByte of the opcode)
	uint32_t svc_number = (uint32_t) pReturn_addr;
 8000272:	69bb      	ldr	r3, [r7, #24]
 8000274:	617b      	str	r3, [r7, #20]
	printf("Svc number is : %lx\n",svc_number);
 8000276:	6979      	ldr	r1, [r7, #20]
 8000278:	481b      	ldr	r0, [pc, #108]	; (80002e8 <SVC_Handler_c+0x8c>)
 800027a:	f000 f9b3 	bl	80005e4 <iprintf>

	arg0 = pBaseOfStackFrame[0]; // arg0 equals to R0
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	613b      	str	r3, [r7, #16]
	arg1 = pBaseOfStackFrame[1]; // arg1 equals to R1   Procedure Call Standart for ARM
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	60fb      	str	r3, [r7, #12]

	switch(svc_number){
 800028a:	697b      	ldr	r3, [r7, #20]
 800028c:	3b24      	subs	r3, #36	; 0x24
 800028e:	2b03      	cmp	r3, #3
 8000290:	d820      	bhi.n	80002d4 <SVC_Handler_c+0x78>
 8000292:	a201      	add	r2, pc, #4	; (adr r2, 8000298 <SVC_Handler_c+0x3c>)
 8000294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000298:	080002a9 	.word	0x080002a9
 800029c:	080002b3 	.word	0x080002b3
 80002a0:	080002bd 	.word	0x080002bd
 80002a4:	080002c9 	.word	0x080002c9
	case 36:
		res = arg0 + arg1;
 80002a8:	693a      	ldr	r2, [r7, #16]
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	4413      	add	r3, r2
 80002ae:	61fb      	str	r3, [r7, #28]
		break;
 80002b0:	e013      	b.n	80002da <SVC_Handler_c+0x7e>
	case 37:
		res = arg0 - arg1;
 80002b2:	693a      	ldr	r2, [r7, #16]
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	61fb      	str	r3, [r7, #28]
		break;
 80002ba:	e00e      	b.n	80002da <SVC_Handler_c+0x7e>
	case 38:
		res = arg0 * arg1;
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	fb02 f303 	mul.w	r3, r2, r3
 80002c4:	61fb      	str	r3, [r7, #28]
		break;
 80002c6:	e008      	b.n	80002da <SVC_Handler_c+0x7e>
	case 39:
		res = arg0 / arg1;
 80002c8:	693a      	ldr	r2, [r7, #16]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002d0:	61fb      	str	r3, [r7, #28]
		break;
 80002d2:	e002      	b.n	80002da <SVC_Handler_c+0x7e>
	default:
		printf("Invalid SVC code.\n");
 80002d4:	4805      	ldr	r0, [pc, #20]	; (80002ec <SVC_Handler_c+0x90>)
 80002d6:	f000 f9eb 	bl	80006b0 <puts>
	}

	pBaseOfStackFrame[0] = res;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	69fa      	ldr	r2, [r7, #28]
 80002de:	601a      	str	r2, [r3, #0]

}
 80002e0:	bf00      	nop
 80002e2:	3720      	adds	r7, #32
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	080013f8 	.word	0x080013f8
 80002ec:	08001410 	.word	0x08001410

080002f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
 8000300:	e00a      	b.n	8000318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000302:	f3af 8000 	nop.w
 8000306:	4601      	mov	r1, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1c5a      	adds	r2, r3, #1
 800030c:	60ba      	str	r2, [r7, #8]
 800030e:	b2ca      	uxtb	r2, r1
 8000310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
 8000318:	697a      	ldr	r2, [r7, #20]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	dbf0      	blt.n	8000302 <_read+0x12>
  }

  return len;
 8000320:	687b      	ldr	r3, [r7, #4]
}
 8000322:	4618      	mov	r0, r3
 8000324:	3718      	adds	r7, #24
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}

0800032a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800032a:	b580      	push	{r7, lr}
 800032c:	b086      	sub	sp, #24
 800032e:	af00      	add	r7, sp, #0
 8000330:	60f8      	str	r0, [r7, #12]
 8000332:	60b9      	str	r1, [r7, #8]
 8000334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	e009      	b.n	8000350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	1c5a      	adds	r2, r3, #1
 8000340:	60ba      	str	r2, [r7, #8]
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4618      	mov	r0, r3
 8000346:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	3301      	adds	r3, #1
 800034e:	617b      	str	r3, [r7, #20]
 8000350:	697a      	ldr	r2, [r7, #20]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	429a      	cmp	r2, r3
 8000356:	dbf1      	blt.n	800033c <_write+0x12>
  }
  return len;
 8000358:	687b      	ldr	r3, [r7, #4]
}
 800035a:	4618      	mov	r0, r3
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <_close>:

int _close(int file)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800036a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000388:	605a      	str	r2, [r3, #4]
  return 0;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr

08000396 <_isatty>:

int _isatty(int file)
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800039e:	2301      	movs	r3, #1
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003aa:	b480      	push	{r7}
 80003ac:	b085      	sub	sp, #20
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	60f8      	str	r0, [r7, #12]
 80003b2:	60b9      	str	r1, [r7, #8]
 80003b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003b6:	2300      	movs	r3, #0
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	3714      	adds	r7, #20
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
	...

080003c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <_sbrk+0x5c>)
 80003ce:	4b15      	ldr	r3, [pc, #84]	; (8000424 <_sbrk+0x60>)
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <_sbrk+0x64>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d102      	bne.n	80003e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <_sbrk+0x64>)
 80003e2:	4a12      	ldr	r2, [pc, #72]	; (800042c <_sbrk+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003e6:	4b10      	ldr	r3, [pc, #64]	; (8000428 <_sbrk+0x64>)
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4413      	add	r3, r2
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d207      	bcs.n	8000404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f4:	f000 fa8a 	bl	800090c <__errno>
 80003f8:	4603      	mov	r3, r0
 80003fa:	220c      	movs	r2, #12
 80003fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	e009      	b.n	8000418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <_sbrk+0x64>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <_sbrk+0x64>)
 800040c:	681a      	ldr	r2, [r3, #0]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4413      	add	r3, r2
 8000412:	4a05      	ldr	r2, [pc, #20]	; (8000428 <_sbrk+0x64>)
 8000414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000416:	68fb      	ldr	r3, [r7, #12]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20005000 	.word	0x20005000
 8000424:	00000400 	.word	0x00000400
 8000428:	20000078 	.word	0x20000078
 800042c:	200001c8 	.word	0x200001c8

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	; (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	; (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	; (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	; (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 fa5b 	bl	8000918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff febd 	bl	80001e0 <main>

08000466 <LoopForever>:

LoopForever:
  b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000474:	08001460 	.word	0x08001460
  ldr r2, =_sbss
 8000478:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800047c:	200001c8 	.word	0x200001c8

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
	...

08000484 <std>:
 8000484:	2300      	movs	r3, #0
 8000486:	b510      	push	{r4, lr}
 8000488:	4604      	mov	r4, r0
 800048a:	e9c0 3300 	strd	r3, r3, [r0]
 800048e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000492:	6083      	str	r3, [r0, #8]
 8000494:	8181      	strh	r1, [r0, #12]
 8000496:	6643      	str	r3, [r0, #100]	; 0x64
 8000498:	81c2      	strh	r2, [r0, #14]
 800049a:	6183      	str	r3, [r0, #24]
 800049c:	4619      	mov	r1, r3
 800049e:	2208      	movs	r2, #8
 80004a0:	305c      	adds	r0, #92	; 0x5c
 80004a2:	f000 f9e5 	bl	8000870 <memset>
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <std+0x38>)
 80004a8:	6224      	str	r4, [r4, #32]
 80004aa:	6263      	str	r3, [r4, #36]	; 0x24
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <std+0x3c>)
 80004ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <std+0x40>)
 80004b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <std+0x44>)
 80004b6:	6323      	str	r3, [r4, #48]	; 0x30
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	bf00      	nop
 80004bc:	080006c1 	.word	0x080006c1
 80004c0:	080006e3 	.word	0x080006e3
 80004c4:	0800071b 	.word	0x0800071b
 80004c8:	0800073f 	.word	0x0800073f

080004cc <stdio_exit_handler>:
 80004cc:	4a02      	ldr	r2, [pc, #8]	; (80004d8 <stdio_exit_handler+0xc>)
 80004ce:	4903      	ldr	r1, [pc, #12]	; (80004dc <stdio_exit_handler+0x10>)
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <stdio_exit_handler+0x14>)
 80004d2:	f000 b869 	b.w	80005a8 <_fwalk_sglue>
 80004d6:	bf00      	nop
 80004d8:	20000000 	.word	0x20000000
 80004dc:	080011fd 	.word	0x080011fd
 80004e0:	2000000c 	.word	0x2000000c

080004e4 <cleanup_stdio>:
 80004e4:	6841      	ldr	r1, [r0, #4]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <cleanup_stdio+0x34>)
 80004e8:	b510      	push	{r4, lr}
 80004ea:	4299      	cmp	r1, r3
 80004ec:	4604      	mov	r4, r0
 80004ee:	d001      	beq.n	80004f4 <cleanup_stdio+0x10>
 80004f0:	f000 fe84 	bl	80011fc <_fflush_r>
 80004f4:	68a1      	ldr	r1, [r4, #8]
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <cleanup_stdio+0x38>)
 80004f8:	4299      	cmp	r1, r3
 80004fa:	d002      	beq.n	8000502 <cleanup_stdio+0x1e>
 80004fc:	4620      	mov	r0, r4
 80004fe:	f000 fe7d 	bl	80011fc <_fflush_r>
 8000502:	68e1      	ldr	r1, [r4, #12]
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <cleanup_stdio+0x3c>)
 8000506:	4299      	cmp	r1, r3
 8000508:	d004      	beq.n	8000514 <cleanup_stdio+0x30>
 800050a:	4620      	mov	r0, r4
 800050c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000510:	f000 be74 	b.w	80011fc <_fflush_r>
 8000514:	bd10      	pop	{r4, pc}
 8000516:	bf00      	nop
 8000518:	2000007c 	.word	0x2000007c
 800051c:	200000e4 	.word	0x200000e4
 8000520:	2000014c 	.word	0x2000014c

08000524 <global_stdio_init.part.0>:
 8000524:	b510      	push	{r4, lr}
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <global_stdio_init.part.0+0x30>)
 8000528:	4c0b      	ldr	r4, [pc, #44]	; (8000558 <global_stdio_init.part.0+0x34>)
 800052a:	4a0c      	ldr	r2, [pc, #48]	; (800055c <global_stdio_init.part.0+0x38>)
 800052c:	4620      	mov	r0, r4
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	2104      	movs	r1, #4
 8000532:	2200      	movs	r2, #0
 8000534:	f7ff ffa6 	bl	8000484 <std>
 8000538:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800053c:	2201      	movs	r2, #1
 800053e:	2109      	movs	r1, #9
 8000540:	f7ff ffa0 	bl	8000484 <std>
 8000544:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000548:	2202      	movs	r2, #2
 800054a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800054e:	2112      	movs	r1, #18
 8000550:	f7ff bf98 	b.w	8000484 <std>
 8000554:	200001b4 	.word	0x200001b4
 8000558:	2000007c 	.word	0x2000007c
 800055c:	080004cd 	.word	0x080004cd

08000560 <__sfp_lock_acquire>:
 8000560:	4801      	ldr	r0, [pc, #4]	; (8000568 <__sfp_lock_acquire+0x8>)
 8000562:	f000 b9fd 	b.w	8000960 <__retarget_lock_acquire_recursive>
 8000566:	bf00      	nop
 8000568:	200001bd 	.word	0x200001bd

0800056c <__sfp_lock_release>:
 800056c:	4801      	ldr	r0, [pc, #4]	; (8000574 <__sfp_lock_release+0x8>)
 800056e:	f000 b9f8 	b.w	8000962 <__retarget_lock_release_recursive>
 8000572:	bf00      	nop
 8000574:	200001bd 	.word	0x200001bd

08000578 <__sinit>:
 8000578:	b510      	push	{r4, lr}
 800057a:	4604      	mov	r4, r0
 800057c:	f7ff fff0 	bl	8000560 <__sfp_lock_acquire>
 8000580:	6a23      	ldr	r3, [r4, #32]
 8000582:	b11b      	cbz	r3, 800058c <__sinit+0x14>
 8000584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000588:	f7ff bff0 	b.w	800056c <__sfp_lock_release>
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__sinit+0x28>)
 800058e:	6223      	str	r3, [r4, #32]
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <__sinit+0x2c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1f5      	bne.n	8000584 <__sinit+0xc>
 8000598:	f7ff ffc4 	bl	8000524 <global_stdio_init.part.0>
 800059c:	e7f2      	b.n	8000584 <__sinit+0xc>
 800059e:	bf00      	nop
 80005a0:	080004e5 	.word	0x080004e5
 80005a4:	200001b4 	.word	0x200001b4

080005a8 <_fwalk_sglue>:
 80005a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005ac:	4607      	mov	r7, r0
 80005ae:	4688      	mov	r8, r1
 80005b0:	4614      	mov	r4, r2
 80005b2:	2600      	movs	r6, #0
 80005b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005b8:	f1b9 0901 	subs.w	r9, r9, #1
 80005bc:	d505      	bpl.n	80005ca <_fwalk_sglue+0x22>
 80005be:	6824      	ldr	r4, [r4, #0]
 80005c0:	2c00      	cmp	r4, #0
 80005c2:	d1f7      	bne.n	80005b4 <_fwalk_sglue+0xc>
 80005c4:	4630      	mov	r0, r6
 80005c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005ca:	89ab      	ldrh	r3, [r5, #12]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d907      	bls.n	80005e0 <_fwalk_sglue+0x38>
 80005d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005d4:	3301      	adds	r3, #1
 80005d6:	d003      	beq.n	80005e0 <_fwalk_sglue+0x38>
 80005d8:	4629      	mov	r1, r5
 80005da:	4638      	mov	r0, r7
 80005dc:	47c0      	blx	r8
 80005de:	4306      	orrs	r6, r0
 80005e0:	3568      	adds	r5, #104	; 0x68
 80005e2:	e7e9      	b.n	80005b8 <_fwalk_sglue+0x10>

080005e4 <iprintf>:
 80005e4:	b40f      	push	{r0, r1, r2, r3}
 80005e6:	b507      	push	{r0, r1, r2, lr}
 80005e8:	4906      	ldr	r1, [pc, #24]	; (8000604 <iprintf+0x20>)
 80005ea:	ab04      	add	r3, sp, #16
 80005ec:	6808      	ldr	r0, [r1, #0]
 80005ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80005f2:	6881      	ldr	r1, [r0, #8]
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	f000 fad1 	bl	8000b9c <_vfiprintf_r>
 80005fa:	b003      	add	sp, #12
 80005fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000600:	b004      	add	sp, #16
 8000602:	4770      	bx	lr
 8000604:	20000058 	.word	0x20000058

08000608 <_puts_r>:
 8000608:	6a03      	ldr	r3, [r0, #32]
 800060a:	b570      	push	{r4, r5, r6, lr}
 800060c:	4605      	mov	r5, r0
 800060e:	460e      	mov	r6, r1
 8000610:	6884      	ldr	r4, [r0, #8]
 8000612:	b90b      	cbnz	r3, 8000618 <_puts_r+0x10>
 8000614:	f7ff ffb0 	bl	8000578 <__sinit>
 8000618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800061a:	07db      	lsls	r3, r3, #31
 800061c:	d405      	bmi.n	800062a <_puts_r+0x22>
 800061e:	89a3      	ldrh	r3, [r4, #12]
 8000620:	0598      	lsls	r0, r3, #22
 8000622:	d402      	bmi.n	800062a <_puts_r+0x22>
 8000624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000626:	f000 f99b 	bl	8000960 <__retarget_lock_acquire_recursive>
 800062a:	89a3      	ldrh	r3, [r4, #12]
 800062c:	0719      	lsls	r1, r3, #28
 800062e:	d513      	bpl.n	8000658 <_puts_r+0x50>
 8000630:	6923      	ldr	r3, [r4, #16]
 8000632:	b18b      	cbz	r3, 8000658 <_puts_r+0x50>
 8000634:	3e01      	subs	r6, #1
 8000636:	68a3      	ldr	r3, [r4, #8]
 8000638:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800063c:	3b01      	subs	r3, #1
 800063e:	60a3      	str	r3, [r4, #8]
 8000640:	b9e9      	cbnz	r1, 800067e <_puts_r+0x76>
 8000642:	2b00      	cmp	r3, #0
 8000644:	da2e      	bge.n	80006a4 <_puts_r+0x9c>
 8000646:	4622      	mov	r2, r4
 8000648:	210a      	movs	r1, #10
 800064a:	4628      	mov	r0, r5
 800064c:	f000 f87b 	bl	8000746 <__swbuf_r>
 8000650:	3001      	adds	r0, #1
 8000652:	d007      	beq.n	8000664 <_puts_r+0x5c>
 8000654:	250a      	movs	r5, #10
 8000656:	e007      	b.n	8000668 <_puts_r+0x60>
 8000658:	4621      	mov	r1, r4
 800065a:	4628      	mov	r0, r5
 800065c:	f000 f8b0 	bl	80007c0 <__swsetup_r>
 8000660:	2800      	cmp	r0, #0
 8000662:	d0e7      	beq.n	8000634 <_puts_r+0x2c>
 8000664:	f04f 35ff 	mov.w	r5, #4294967295
 8000668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800066a:	07da      	lsls	r2, r3, #31
 800066c:	d405      	bmi.n	800067a <_puts_r+0x72>
 800066e:	89a3      	ldrh	r3, [r4, #12]
 8000670:	059b      	lsls	r3, r3, #22
 8000672:	d402      	bmi.n	800067a <_puts_r+0x72>
 8000674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000676:	f000 f974 	bl	8000962 <__retarget_lock_release_recursive>
 800067a:	4628      	mov	r0, r5
 800067c:	bd70      	pop	{r4, r5, r6, pc}
 800067e:	2b00      	cmp	r3, #0
 8000680:	da04      	bge.n	800068c <_puts_r+0x84>
 8000682:	69a2      	ldr	r2, [r4, #24]
 8000684:	429a      	cmp	r2, r3
 8000686:	dc06      	bgt.n	8000696 <_puts_r+0x8e>
 8000688:	290a      	cmp	r1, #10
 800068a:	d004      	beq.n	8000696 <_puts_r+0x8e>
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	6022      	str	r2, [r4, #0]
 8000692:	7019      	strb	r1, [r3, #0]
 8000694:	e7cf      	b.n	8000636 <_puts_r+0x2e>
 8000696:	4622      	mov	r2, r4
 8000698:	4628      	mov	r0, r5
 800069a:	f000 f854 	bl	8000746 <__swbuf_r>
 800069e:	3001      	adds	r0, #1
 80006a0:	d1c9      	bne.n	8000636 <_puts_r+0x2e>
 80006a2:	e7df      	b.n	8000664 <_puts_r+0x5c>
 80006a4:	250a      	movs	r5, #10
 80006a6:	6823      	ldr	r3, [r4, #0]
 80006a8:	1c5a      	adds	r2, r3, #1
 80006aa:	6022      	str	r2, [r4, #0]
 80006ac:	701d      	strb	r5, [r3, #0]
 80006ae:	e7db      	b.n	8000668 <_puts_r+0x60>

080006b0 <puts>:
 80006b0:	4b02      	ldr	r3, [pc, #8]	; (80006bc <puts+0xc>)
 80006b2:	4601      	mov	r1, r0
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	f7ff bfa7 	b.w	8000608 <_puts_r>
 80006ba:	bf00      	nop
 80006bc:	20000058 	.word	0x20000058

080006c0 <__sread>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	460c      	mov	r4, r1
 80006c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006c8:	f000 f8fc 	bl	80008c4 <_read_r>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	bfab      	itete	ge
 80006d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80006d2:	89a3      	ldrhlt	r3, [r4, #12]
 80006d4:	181b      	addge	r3, r3, r0
 80006d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80006da:	bfac      	ite	ge
 80006dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80006de:	81a3      	strhlt	r3, [r4, #12]
 80006e0:	bd10      	pop	{r4, pc}

080006e2 <__swrite>:
 80006e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006e6:	461f      	mov	r7, r3
 80006e8:	898b      	ldrh	r3, [r1, #12]
 80006ea:	4605      	mov	r5, r0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	460c      	mov	r4, r1
 80006f0:	4616      	mov	r6, r2
 80006f2:	d505      	bpl.n	8000700 <__swrite+0x1e>
 80006f4:	2302      	movs	r3, #2
 80006f6:	2200      	movs	r2, #0
 80006f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006fc:	f000 f8d0 	bl	80008a0 <_lseek_r>
 8000700:	89a3      	ldrh	r3, [r4, #12]
 8000702:	4632      	mov	r2, r6
 8000704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000708:	81a3      	strh	r3, [r4, #12]
 800070a:	4628      	mov	r0, r5
 800070c:	463b      	mov	r3, r7
 800070e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000716:	f000 b8e7 	b.w	80008e8 <_write_r>

0800071a <__sseek>:
 800071a:	b510      	push	{r4, lr}
 800071c:	460c      	mov	r4, r1
 800071e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000722:	f000 f8bd 	bl	80008a0 <_lseek_r>
 8000726:	1c43      	adds	r3, r0, #1
 8000728:	89a3      	ldrh	r3, [r4, #12]
 800072a:	bf15      	itete	ne
 800072c:	6560      	strne	r0, [r4, #84]	; 0x54
 800072e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000736:	81a3      	strheq	r3, [r4, #12]
 8000738:	bf18      	it	ne
 800073a:	81a3      	strhne	r3, [r4, #12]
 800073c:	bd10      	pop	{r4, pc}

0800073e <__sclose>:
 800073e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000742:	f000 b89d 	b.w	8000880 <_close_r>

08000746 <__swbuf_r>:
 8000746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000748:	460e      	mov	r6, r1
 800074a:	4614      	mov	r4, r2
 800074c:	4605      	mov	r5, r0
 800074e:	b118      	cbz	r0, 8000758 <__swbuf_r+0x12>
 8000750:	6a03      	ldr	r3, [r0, #32]
 8000752:	b90b      	cbnz	r3, 8000758 <__swbuf_r+0x12>
 8000754:	f7ff ff10 	bl	8000578 <__sinit>
 8000758:	69a3      	ldr	r3, [r4, #24]
 800075a:	60a3      	str	r3, [r4, #8]
 800075c:	89a3      	ldrh	r3, [r4, #12]
 800075e:	071a      	lsls	r2, r3, #28
 8000760:	d525      	bpl.n	80007ae <__swbuf_r+0x68>
 8000762:	6923      	ldr	r3, [r4, #16]
 8000764:	b31b      	cbz	r3, 80007ae <__swbuf_r+0x68>
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	6922      	ldr	r2, [r4, #16]
 800076a:	b2f6      	uxtb	r6, r6
 800076c:	1a98      	subs	r0, r3, r2
 800076e:	6963      	ldr	r3, [r4, #20]
 8000770:	4637      	mov	r7, r6
 8000772:	4283      	cmp	r3, r0
 8000774:	dc04      	bgt.n	8000780 <__swbuf_r+0x3a>
 8000776:	4621      	mov	r1, r4
 8000778:	4628      	mov	r0, r5
 800077a:	f000 fd3f 	bl	80011fc <_fflush_r>
 800077e:	b9e0      	cbnz	r0, 80007ba <__swbuf_r+0x74>
 8000780:	68a3      	ldr	r3, [r4, #8]
 8000782:	3b01      	subs	r3, #1
 8000784:	60a3      	str	r3, [r4, #8]
 8000786:	6823      	ldr	r3, [r4, #0]
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	6022      	str	r2, [r4, #0]
 800078c:	701e      	strb	r6, [r3, #0]
 800078e:	6962      	ldr	r2, [r4, #20]
 8000790:	1c43      	adds	r3, r0, #1
 8000792:	429a      	cmp	r2, r3
 8000794:	d004      	beq.n	80007a0 <__swbuf_r+0x5a>
 8000796:	89a3      	ldrh	r3, [r4, #12]
 8000798:	07db      	lsls	r3, r3, #31
 800079a:	d506      	bpl.n	80007aa <__swbuf_r+0x64>
 800079c:	2e0a      	cmp	r6, #10
 800079e:	d104      	bne.n	80007aa <__swbuf_r+0x64>
 80007a0:	4621      	mov	r1, r4
 80007a2:	4628      	mov	r0, r5
 80007a4:	f000 fd2a 	bl	80011fc <_fflush_r>
 80007a8:	b938      	cbnz	r0, 80007ba <__swbuf_r+0x74>
 80007aa:	4638      	mov	r0, r7
 80007ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ae:	4621      	mov	r1, r4
 80007b0:	4628      	mov	r0, r5
 80007b2:	f000 f805 	bl	80007c0 <__swsetup_r>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	d0d5      	beq.n	8000766 <__swbuf_r+0x20>
 80007ba:	f04f 37ff 	mov.w	r7, #4294967295
 80007be:	e7f4      	b.n	80007aa <__swbuf_r+0x64>

080007c0 <__swsetup_r>:
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <__swsetup_r+0xac>)
 80007c4:	4605      	mov	r5, r0
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	460c      	mov	r4, r1
 80007ca:	b118      	cbz	r0, 80007d4 <__swsetup_r+0x14>
 80007cc:	6a03      	ldr	r3, [r0, #32]
 80007ce:	b90b      	cbnz	r3, 80007d4 <__swsetup_r+0x14>
 80007d0:	f7ff fed2 	bl	8000578 <__sinit>
 80007d4:	89a3      	ldrh	r3, [r4, #12]
 80007d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80007da:	0718      	lsls	r0, r3, #28
 80007dc:	d422      	bmi.n	8000824 <__swsetup_r+0x64>
 80007de:	06d9      	lsls	r1, r3, #27
 80007e0:	d407      	bmi.n	80007f2 <__swsetup_r+0x32>
 80007e2:	2309      	movs	r3, #9
 80007e4:	602b      	str	r3, [r5, #0]
 80007e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80007ea:	f04f 30ff 	mov.w	r0, #4294967295
 80007ee:	81a3      	strh	r3, [r4, #12]
 80007f0:	e034      	b.n	800085c <__swsetup_r+0x9c>
 80007f2:	0758      	lsls	r0, r3, #29
 80007f4:	d512      	bpl.n	800081c <__swsetup_r+0x5c>
 80007f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007f8:	b141      	cbz	r1, 800080c <__swsetup_r+0x4c>
 80007fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007fe:	4299      	cmp	r1, r3
 8000800:	d002      	beq.n	8000808 <__swsetup_r+0x48>
 8000802:	4628      	mov	r0, r5
 8000804:	f000 f8ae 	bl	8000964 <_free_r>
 8000808:	2300      	movs	r3, #0
 800080a:	6363      	str	r3, [r4, #52]	; 0x34
 800080c:	89a3      	ldrh	r3, [r4, #12]
 800080e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000812:	81a3      	strh	r3, [r4, #12]
 8000814:	2300      	movs	r3, #0
 8000816:	6063      	str	r3, [r4, #4]
 8000818:	6923      	ldr	r3, [r4, #16]
 800081a:	6023      	str	r3, [r4, #0]
 800081c:	89a3      	ldrh	r3, [r4, #12]
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	81a3      	strh	r3, [r4, #12]
 8000824:	6923      	ldr	r3, [r4, #16]
 8000826:	b94b      	cbnz	r3, 800083c <__swsetup_r+0x7c>
 8000828:	89a3      	ldrh	r3, [r4, #12]
 800082a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800082e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000832:	d003      	beq.n	800083c <__swsetup_r+0x7c>
 8000834:	4621      	mov	r1, r4
 8000836:	4628      	mov	r0, r5
 8000838:	f000 fd2d 	bl	8001296 <__smakebuf_r>
 800083c:	89a0      	ldrh	r0, [r4, #12]
 800083e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000842:	f010 0301 	ands.w	r3, r0, #1
 8000846:	d00a      	beq.n	800085e <__swsetup_r+0x9e>
 8000848:	2300      	movs	r3, #0
 800084a:	60a3      	str	r3, [r4, #8]
 800084c:	6963      	ldr	r3, [r4, #20]
 800084e:	425b      	negs	r3, r3
 8000850:	61a3      	str	r3, [r4, #24]
 8000852:	6923      	ldr	r3, [r4, #16]
 8000854:	b943      	cbnz	r3, 8000868 <__swsetup_r+0xa8>
 8000856:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800085a:	d1c4      	bne.n	80007e6 <__swsetup_r+0x26>
 800085c:	bd38      	pop	{r3, r4, r5, pc}
 800085e:	0781      	lsls	r1, r0, #30
 8000860:	bf58      	it	pl
 8000862:	6963      	ldrpl	r3, [r4, #20]
 8000864:	60a3      	str	r3, [r4, #8]
 8000866:	e7f4      	b.n	8000852 <__swsetup_r+0x92>
 8000868:	2000      	movs	r0, #0
 800086a:	e7f7      	b.n	800085c <__swsetup_r+0x9c>
 800086c:	20000058 	.word	0x20000058

08000870 <memset>:
 8000870:	4603      	mov	r3, r0
 8000872:	4402      	add	r2, r0
 8000874:	4293      	cmp	r3, r2
 8000876:	d100      	bne.n	800087a <memset+0xa>
 8000878:	4770      	bx	lr
 800087a:	f803 1b01 	strb.w	r1, [r3], #1
 800087e:	e7f9      	b.n	8000874 <memset+0x4>

08000880 <_close_r>:
 8000880:	b538      	push	{r3, r4, r5, lr}
 8000882:	2300      	movs	r3, #0
 8000884:	4d05      	ldr	r5, [pc, #20]	; (800089c <_close_r+0x1c>)
 8000886:	4604      	mov	r4, r0
 8000888:	4608      	mov	r0, r1
 800088a:	602b      	str	r3, [r5, #0]
 800088c:	f7ff fd69 	bl	8000362 <_close>
 8000890:	1c43      	adds	r3, r0, #1
 8000892:	d102      	bne.n	800089a <_close_r+0x1a>
 8000894:	682b      	ldr	r3, [r5, #0]
 8000896:	b103      	cbz	r3, 800089a <_close_r+0x1a>
 8000898:	6023      	str	r3, [r4, #0]
 800089a:	bd38      	pop	{r3, r4, r5, pc}
 800089c:	200001b8 	.word	0x200001b8

080008a0 <_lseek_r>:
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	4d05      	ldr	r5, [pc, #20]	; (80008c0 <_lseek_r+0x20>)
 80008ac:	602a      	str	r2, [r5, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	f7ff fd7b 	bl	80003aa <_lseek>
 80008b4:	1c43      	adds	r3, r0, #1
 80008b6:	d102      	bne.n	80008be <_lseek_r+0x1e>
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	b103      	cbz	r3, 80008be <_lseek_r+0x1e>
 80008bc:	6023      	str	r3, [r4, #0]
 80008be:	bd38      	pop	{r3, r4, r5, pc}
 80008c0:	200001b8 	.word	0x200001b8

080008c4 <_read_r>:
 80008c4:	b538      	push	{r3, r4, r5, lr}
 80008c6:	4604      	mov	r4, r0
 80008c8:	4608      	mov	r0, r1
 80008ca:	4611      	mov	r1, r2
 80008cc:	2200      	movs	r2, #0
 80008ce:	4d05      	ldr	r5, [pc, #20]	; (80008e4 <_read_r+0x20>)
 80008d0:	602a      	str	r2, [r5, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	f7ff fd0c 	bl	80002f0 <_read>
 80008d8:	1c43      	adds	r3, r0, #1
 80008da:	d102      	bne.n	80008e2 <_read_r+0x1e>
 80008dc:	682b      	ldr	r3, [r5, #0]
 80008de:	b103      	cbz	r3, 80008e2 <_read_r+0x1e>
 80008e0:	6023      	str	r3, [r4, #0]
 80008e2:	bd38      	pop	{r3, r4, r5, pc}
 80008e4:	200001b8 	.word	0x200001b8

080008e8 <_write_r>:
 80008e8:	b538      	push	{r3, r4, r5, lr}
 80008ea:	4604      	mov	r4, r0
 80008ec:	4608      	mov	r0, r1
 80008ee:	4611      	mov	r1, r2
 80008f0:	2200      	movs	r2, #0
 80008f2:	4d05      	ldr	r5, [pc, #20]	; (8000908 <_write_r+0x20>)
 80008f4:	602a      	str	r2, [r5, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	f7ff fd17 	bl	800032a <_write>
 80008fc:	1c43      	adds	r3, r0, #1
 80008fe:	d102      	bne.n	8000906 <_write_r+0x1e>
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	b103      	cbz	r3, 8000906 <_write_r+0x1e>
 8000904:	6023      	str	r3, [r4, #0]
 8000906:	bd38      	pop	{r3, r4, r5, pc}
 8000908:	200001b8 	.word	0x200001b8

0800090c <__errno>:
 800090c:	4b01      	ldr	r3, [pc, #4]	; (8000914 <__errno+0x8>)
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000058 	.word	0x20000058

08000918 <__libc_init_array>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	2600      	movs	r6, #0
 800091c:	4d0c      	ldr	r5, [pc, #48]	; (8000950 <__libc_init_array+0x38>)
 800091e:	4c0d      	ldr	r4, [pc, #52]	; (8000954 <__libc_init_array+0x3c>)
 8000920:	1b64      	subs	r4, r4, r5
 8000922:	10a4      	asrs	r4, r4, #2
 8000924:	42a6      	cmp	r6, r4
 8000926:	d109      	bne.n	800093c <__libc_init_array+0x24>
 8000928:	f000 fd32 	bl	8001390 <_init>
 800092c:	2600      	movs	r6, #0
 800092e:	4d0a      	ldr	r5, [pc, #40]	; (8000958 <__libc_init_array+0x40>)
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <__libc_init_array+0x44>)
 8000932:	1b64      	subs	r4, r4, r5
 8000934:	10a4      	asrs	r4, r4, #2
 8000936:	42a6      	cmp	r6, r4
 8000938:	d105      	bne.n	8000946 <__libc_init_array+0x2e>
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000940:	4798      	blx	r3
 8000942:	3601      	adds	r6, #1
 8000944:	e7ee      	b.n	8000924 <__libc_init_array+0xc>
 8000946:	f855 3b04 	ldr.w	r3, [r5], #4
 800094a:	4798      	blx	r3
 800094c:	3601      	adds	r6, #1
 800094e:	e7f2      	b.n	8000936 <__libc_init_array+0x1e>
 8000950:	08001458 	.word	0x08001458
 8000954:	08001458 	.word	0x08001458
 8000958:	08001458 	.word	0x08001458
 800095c:	0800145c 	.word	0x0800145c

08000960 <__retarget_lock_acquire_recursive>:
 8000960:	4770      	bx	lr

08000962 <__retarget_lock_release_recursive>:
 8000962:	4770      	bx	lr

08000964 <_free_r>:
 8000964:	b538      	push	{r3, r4, r5, lr}
 8000966:	4605      	mov	r5, r0
 8000968:	2900      	cmp	r1, #0
 800096a:	d040      	beq.n	80009ee <_free_r+0x8a>
 800096c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000970:	1f0c      	subs	r4, r1, #4
 8000972:	2b00      	cmp	r3, #0
 8000974:	bfb8      	it	lt
 8000976:	18e4      	addlt	r4, r4, r3
 8000978:	f000 f8dc 	bl	8000b34 <__malloc_lock>
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <_free_r+0x8c>)
 800097e:	6813      	ldr	r3, [r2, #0]
 8000980:	b933      	cbnz	r3, 8000990 <_free_r+0x2c>
 8000982:	6063      	str	r3, [r4, #4]
 8000984:	6014      	str	r4, [r2, #0]
 8000986:	4628      	mov	r0, r5
 8000988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800098c:	f000 b8d8 	b.w	8000b40 <__malloc_unlock>
 8000990:	42a3      	cmp	r3, r4
 8000992:	d908      	bls.n	80009a6 <_free_r+0x42>
 8000994:	6820      	ldr	r0, [r4, #0]
 8000996:	1821      	adds	r1, r4, r0
 8000998:	428b      	cmp	r3, r1
 800099a:	bf01      	itttt	eq
 800099c:	6819      	ldreq	r1, [r3, #0]
 800099e:	685b      	ldreq	r3, [r3, #4]
 80009a0:	1809      	addeq	r1, r1, r0
 80009a2:	6021      	streq	r1, [r4, #0]
 80009a4:	e7ed      	b.n	8000982 <_free_r+0x1e>
 80009a6:	461a      	mov	r2, r3
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	b10b      	cbz	r3, 80009b0 <_free_r+0x4c>
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	d9fa      	bls.n	80009a6 <_free_r+0x42>
 80009b0:	6811      	ldr	r1, [r2, #0]
 80009b2:	1850      	adds	r0, r2, r1
 80009b4:	42a0      	cmp	r0, r4
 80009b6:	d10b      	bne.n	80009d0 <_free_r+0x6c>
 80009b8:	6820      	ldr	r0, [r4, #0]
 80009ba:	4401      	add	r1, r0
 80009bc:	1850      	adds	r0, r2, r1
 80009be:	4283      	cmp	r3, r0
 80009c0:	6011      	str	r1, [r2, #0]
 80009c2:	d1e0      	bne.n	8000986 <_free_r+0x22>
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4408      	add	r0, r1
 80009ca:	6010      	str	r0, [r2, #0]
 80009cc:	6053      	str	r3, [r2, #4]
 80009ce:	e7da      	b.n	8000986 <_free_r+0x22>
 80009d0:	d902      	bls.n	80009d8 <_free_r+0x74>
 80009d2:	230c      	movs	r3, #12
 80009d4:	602b      	str	r3, [r5, #0]
 80009d6:	e7d6      	b.n	8000986 <_free_r+0x22>
 80009d8:	6820      	ldr	r0, [r4, #0]
 80009da:	1821      	adds	r1, r4, r0
 80009dc:	428b      	cmp	r3, r1
 80009de:	bf01      	itttt	eq
 80009e0:	6819      	ldreq	r1, [r3, #0]
 80009e2:	685b      	ldreq	r3, [r3, #4]
 80009e4:	1809      	addeq	r1, r1, r0
 80009e6:	6021      	streq	r1, [r4, #0]
 80009e8:	6063      	str	r3, [r4, #4]
 80009ea:	6054      	str	r4, [r2, #4]
 80009ec:	e7cb      	b.n	8000986 <_free_r+0x22>
 80009ee:	bd38      	pop	{r3, r4, r5, pc}
 80009f0:	200001c0 	.word	0x200001c0

080009f4 <sbrk_aligned>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	4e0e      	ldr	r6, [pc, #56]	; (8000a30 <sbrk_aligned+0x3c>)
 80009f8:	460c      	mov	r4, r1
 80009fa:	6831      	ldr	r1, [r6, #0]
 80009fc:	4605      	mov	r5, r0
 80009fe:	b911      	cbnz	r1, 8000a06 <sbrk_aligned+0x12>
 8000a00:	f000 fca8 	bl	8001354 <_sbrk_r>
 8000a04:	6030      	str	r0, [r6, #0]
 8000a06:	4621      	mov	r1, r4
 8000a08:	4628      	mov	r0, r5
 8000a0a:	f000 fca3 	bl	8001354 <_sbrk_r>
 8000a0e:	1c43      	adds	r3, r0, #1
 8000a10:	d00a      	beq.n	8000a28 <sbrk_aligned+0x34>
 8000a12:	1cc4      	adds	r4, r0, #3
 8000a14:	f024 0403 	bic.w	r4, r4, #3
 8000a18:	42a0      	cmp	r0, r4
 8000a1a:	d007      	beq.n	8000a2c <sbrk_aligned+0x38>
 8000a1c:	1a21      	subs	r1, r4, r0
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f000 fc98 	bl	8001354 <_sbrk_r>
 8000a24:	3001      	adds	r0, #1
 8000a26:	d101      	bne.n	8000a2c <sbrk_aligned+0x38>
 8000a28:	f04f 34ff 	mov.w	r4, #4294967295
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	200001c4 	.word	0x200001c4

08000a34 <_malloc_r>:
 8000a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a38:	1ccd      	adds	r5, r1, #3
 8000a3a:	f025 0503 	bic.w	r5, r5, #3
 8000a3e:	3508      	adds	r5, #8
 8000a40:	2d0c      	cmp	r5, #12
 8000a42:	bf38      	it	cc
 8000a44:	250c      	movcc	r5, #12
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	4607      	mov	r7, r0
 8000a4a:	db01      	blt.n	8000a50 <_malloc_r+0x1c>
 8000a4c:	42a9      	cmp	r1, r5
 8000a4e:	d905      	bls.n	8000a5c <_malloc_r+0x28>
 8000a50:	230c      	movs	r3, #12
 8000a52:	2600      	movs	r6, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4630      	mov	r0, r6
 8000a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b30 <_malloc_r+0xfc>
 8000a60:	f000 f868 	bl	8000b34 <__malloc_lock>
 8000a64:	f8d8 3000 	ldr.w	r3, [r8]
 8000a68:	461c      	mov	r4, r3
 8000a6a:	bb5c      	cbnz	r4, 8000ac4 <_malloc_r+0x90>
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	4638      	mov	r0, r7
 8000a70:	f7ff ffc0 	bl	80009f4 <sbrk_aligned>
 8000a74:	1c43      	adds	r3, r0, #1
 8000a76:	4604      	mov	r4, r0
 8000a78:	d155      	bne.n	8000b26 <_malloc_r+0xf2>
 8000a7a:	f8d8 4000 	ldr.w	r4, [r8]
 8000a7e:	4626      	mov	r6, r4
 8000a80:	2e00      	cmp	r6, #0
 8000a82:	d145      	bne.n	8000b10 <_malloc_r+0xdc>
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d048      	beq.n	8000b1a <_malloc_r+0xe6>
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	4631      	mov	r1, r6
 8000a8c:	4638      	mov	r0, r7
 8000a8e:	eb04 0903 	add.w	r9, r4, r3
 8000a92:	f000 fc5f 	bl	8001354 <_sbrk_r>
 8000a96:	4581      	cmp	r9, r0
 8000a98:	d13f      	bne.n	8000b1a <_malloc_r+0xe6>
 8000a9a:	6821      	ldr	r1, [r4, #0]
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	1a6d      	subs	r5, r5, r1
 8000aa0:	4629      	mov	r1, r5
 8000aa2:	f7ff ffa7 	bl	80009f4 <sbrk_aligned>
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	d037      	beq.n	8000b1a <_malloc_r+0xe6>
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	442b      	add	r3, r5
 8000aae:	6023      	str	r3, [r4, #0]
 8000ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d038      	beq.n	8000b2a <_malloc_r+0xf6>
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	42a2      	cmp	r2, r4
 8000abc:	d12b      	bne.n	8000b16 <_malloc_r+0xe2>
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	e00f      	b.n	8000ae4 <_malloc_r+0xb0>
 8000ac4:	6822      	ldr	r2, [r4, #0]
 8000ac6:	1b52      	subs	r2, r2, r5
 8000ac8:	d41f      	bmi.n	8000b0a <_malloc_r+0xd6>
 8000aca:	2a0b      	cmp	r2, #11
 8000acc:	d917      	bls.n	8000afe <_malloc_r+0xca>
 8000ace:	1961      	adds	r1, r4, r5
 8000ad0:	42a3      	cmp	r3, r4
 8000ad2:	6025      	str	r5, [r4, #0]
 8000ad4:	bf18      	it	ne
 8000ad6:	6059      	strne	r1, [r3, #4]
 8000ad8:	6863      	ldr	r3, [r4, #4]
 8000ada:	bf08      	it	eq
 8000adc:	f8c8 1000 	streq.w	r1, [r8]
 8000ae0:	5162      	str	r2, [r4, r5]
 8000ae2:	604b      	str	r3, [r1, #4]
 8000ae4:	4638      	mov	r0, r7
 8000ae6:	f104 060b 	add.w	r6, r4, #11
 8000aea:	f000 f829 	bl	8000b40 <__malloc_unlock>
 8000aee:	f026 0607 	bic.w	r6, r6, #7
 8000af2:	1d23      	adds	r3, r4, #4
 8000af4:	1af2      	subs	r2, r6, r3
 8000af6:	d0ae      	beq.n	8000a56 <_malloc_r+0x22>
 8000af8:	1b9b      	subs	r3, r3, r6
 8000afa:	50a3      	str	r3, [r4, r2]
 8000afc:	e7ab      	b.n	8000a56 <_malloc_r+0x22>
 8000afe:	42a3      	cmp	r3, r4
 8000b00:	6862      	ldr	r2, [r4, #4]
 8000b02:	d1dd      	bne.n	8000ac0 <_malloc_r+0x8c>
 8000b04:	f8c8 2000 	str.w	r2, [r8]
 8000b08:	e7ec      	b.n	8000ae4 <_malloc_r+0xb0>
 8000b0a:	4623      	mov	r3, r4
 8000b0c:	6864      	ldr	r4, [r4, #4]
 8000b0e:	e7ac      	b.n	8000a6a <_malloc_r+0x36>
 8000b10:	4634      	mov	r4, r6
 8000b12:	6876      	ldr	r6, [r6, #4]
 8000b14:	e7b4      	b.n	8000a80 <_malloc_r+0x4c>
 8000b16:	4613      	mov	r3, r2
 8000b18:	e7cc      	b.n	8000ab4 <_malloc_r+0x80>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	f000 f80e 	bl	8000b40 <__malloc_unlock>
 8000b24:	e797      	b.n	8000a56 <_malloc_r+0x22>
 8000b26:	6025      	str	r5, [r4, #0]
 8000b28:	e7dc      	b.n	8000ae4 <_malloc_r+0xb0>
 8000b2a:	605b      	str	r3, [r3, #4]
 8000b2c:	deff      	udf	#255	; 0xff
 8000b2e:	bf00      	nop
 8000b30:	200001c0 	.word	0x200001c0

08000b34 <__malloc_lock>:
 8000b34:	4801      	ldr	r0, [pc, #4]	; (8000b3c <__malloc_lock+0x8>)
 8000b36:	f7ff bf13 	b.w	8000960 <__retarget_lock_acquire_recursive>
 8000b3a:	bf00      	nop
 8000b3c:	200001bc 	.word	0x200001bc

08000b40 <__malloc_unlock>:
 8000b40:	4801      	ldr	r0, [pc, #4]	; (8000b48 <__malloc_unlock+0x8>)
 8000b42:	f7ff bf0e 	b.w	8000962 <__retarget_lock_release_recursive>
 8000b46:	bf00      	nop
 8000b48:	200001bc 	.word	0x200001bc

08000b4c <__sfputc_r>:
 8000b4c:	6893      	ldr	r3, [r2, #8]
 8000b4e:	b410      	push	{r4}
 8000b50:	3b01      	subs	r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	6093      	str	r3, [r2, #8]
 8000b56:	da07      	bge.n	8000b68 <__sfputc_r+0x1c>
 8000b58:	6994      	ldr	r4, [r2, #24]
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	db01      	blt.n	8000b62 <__sfputc_r+0x16>
 8000b5e:	290a      	cmp	r1, #10
 8000b60:	d102      	bne.n	8000b68 <__sfputc_r+0x1c>
 8000b62:	bc10      	pop	{r4}
 8000b64:	f7ff bdef 	b.w	8000746 <__swbuf_r>
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	1c58      	adds	r0, r3, #1
 8000b6c:	6010      	str	r0, [r2, #0]
 8000b6e:	7019      	strb	r1, [r3, #0]
 8000b70:	4608      	mov	r0, r1
 8000b72:	bc10      	pop	{r4}
 8000b74:	4770      	bx	lr

08000b76 <__sfputs_r>:
 8000b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b78:	4606      	mov	r6, r0
 8000b7a:	460f      	mov	r7, r1
 8000b7c:	4614      	mov	r4, r2
 8000b7e:	18d5      	adds	r5, r2, r3
 8000b80:	42ac      	cmp	r4, r5
 8000b82:	d101      	bne.n	8000b88 <__sfputs_r+0x12>
 8000b84:	2000      	movs	r0, #0
 8000b86:	e007      	b.n	8000b98 <__sfputs_r+0x22>
 8000b88:	463a      	mov	r2, r7
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b90:	f7ff ffdc 	bl	8000b4c <__sfputc_r>
 8000b94:	1c43      	adds	r3, r0, #1
 8000b96:	d1f3      	bne.n	8000b80 <__sfputs_r+0xa>
 8000b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b9c <_vfiprintf_r>:
 8000b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	4614      	mov	r4, r2
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	4606      	mov	r6, r0
 8000ba8:	b09d      	sub	sp, #116	; 0x74
 8000baa:	b118      	cbz	r0, 8000bb4 <_vfiprintf_r+0x18>
 8000bac:	6a03      	ldr	r3, [r0, #32]
 8000bae:	b90b      	cbnz	r3, 8000bb4 <_vfiprintf_r+0x18>
 8000bb0:	f7ff fce2 	bl	8000578 <__sinit>
 8000bb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bb6:	07d9      	lsls	r1, r3, #31
 8000bb8:	d405      	bmi.n	8000bc6 <_vfiprintf_r+0x2a>
 8000bba:	89ab      	ldrh	r3, [r5, #12]
 8000bbc:	059a      	lsls	r2, r3, #22
 8000bbe:	d402      	bmi.n	8000bc6 <_vfiprintf_r+0x2a>
 8000bc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bc2:	f7ff fecd 	bl	8000960 <__retarget_lock_acquire_recursive>
 8000bc6:	89ab      	ldrh	r3, [r5, #12]
 8000bc8:	071b      	lsls	r3, r3, #28
 8000bca:	d501      	bpl.n	8000bd0 <_vfiprintf_r+0x34>
 8000bcc:	692b      	ldr	r3, [r5, #16]
 8000bce:	b99b      	cbnz	r3, 8000bf8 <_vfiprintf_r+0x5c>
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f7ff fdf4 	bl	80007c0 <__swsetup_r>
 8000bd8:	b170      	cbz	r0, 8000bf8 <_vfiprintf_r+0x5c>
 8000bda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bdc:	07dc      	lsls	r4, r3, #31
 8000bde:	d504      	bpl.n	8000bea <_vfiprintf_r+0x4e>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	b01d      	add	sp, #116	; 0x74
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bea:	89ab      	ldrh	r3, [r5, #12]
 8000bec:	0598      	lsls	r0, r3, #22
 8000bee:	d4f7      	bmi.n	8000be0 <_vfiprintf_r+0x44>
 8000bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bf2:	f7ff feb6 	bl	8000962 <__retarget_lock_release_recursive>
 8000bf6:	e7f3      	b.n	8000be0 <_vfiprintf_r+0x44>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c02:	2330      	movs	r3, #48	; 0x30
 8000c04:	f04f 0901 	mov.w	r9, #1
 8000c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000dbc <_vfiprintf_r+0x220>
 8000c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c14:	4623      	mov	r3, r4
 8000c16:	469a      	mov	sl, r3
 8000c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c1c:	b10a      	cbz	r2, 8000c22 <_vfiprintf_r+0x86>
 8000c1e:	2a25      	cmp	r2, #37	; 0x25
 8000c20:	d1f9      	bne.n	8000c16 <_vfiprintf_r+0x7a>
 8000c22:	ebba 0b04 	subs.w	fp, sl, r4
 8000c26:	d00b      	beq.n	8000c40 <_vfiprintf_r+0xa4>
 8000c28:	465b      	mov	r3, fp
 8000c2a:	4622      	mov	r2, r4
 8000c2c:	4629      	mov	r1, r5
 8000c2e:	4630      	mov	r0, r6
 8000c30:	f7ff ffa1 	bl	8000b76 <__sfputs_r>
 8000c34:	3001      	adds	r0, #1
 8000c36:	f000 80a9 	beq.w	8000d8c <_vfiprintf_r+0x1f0>
 8000c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c3c:	445a      	add	r2, fp
 8000c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8000c40:	f89a 3000 	ldrb.w	r3, [sl]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 80a1 	beq.w	8000d8c <_vfiprintf_r+0x1f0>
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c54:	f10a 0a01 	add.w	sl, sl, #1
 8000c58:	9304      	str	r3, [sp, #16]
 8000c5a:	9307      	str	r3, [sp, #28]
 8000c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c60:	931a      	str	r3, [sp, #104]	; 0x68
 8000c62:	4654      	mov	r4, sl
 8000c64:	2205      	movs	r2, #5
 8000c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c6a:	4854      	ldr	r0, [pc, #336]	; (8000dbc <_vfiprintf_r+0x220>)
 8000c6c:	f000 fb82 	bl	8001374 <memchr>
 8000c70:	9a04      	ldr	r2, [sp, #16]
 8000c72:	b9d8      	cbnz	r0, 8000cac <_vfiprintf_r+0x110>
 8000c74:	06d1      	lsls	r1, r2, #27
 8000c76:	bf44      	itt	mi
 8000c78:	2320      	movmi	r3, #32
 8000c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c7e:	0713      	lsls	r3, r2, #28
 8000c80:	bf44      	itt	mi
 8000c82:	232b      	movmi	r3, #43	; 0x2b
 8000c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c88:	f89a 3000 	ldrb.w	r3, [sl]
 8000c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000c8e:	d015      	beq.n	8000cbc <_vfiprintf_r+0x120>
 8000c90:	4654      	mov	r4, sl
 8000c92:	2000      	movs	r0, #0
 8000c94:	f04f 0c0a 	mov.w	ip, #10
 8000c98:	9a07      	ldr	r2, [sp, #28]
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ca0:	3b30      	subs	r3, #48	; 0x30
 8000ca2:	2b09      	cmp	r3, #9
 8000ca4:	d94d      	bls.n	8000d42 <_vfiprintf_r+0x1a6>
 8000ca6:	b1b0      	cbz	r0, 8000cd6 <_vfiprintf_r+0x13a>
 8000ca8:	9207      	str	r2, [sp, #28]
 8000caa:	e014      	b.n	8000cd6 <_vfiprintf_r+0x13a>
 8000cac:	eba0 0308 	sub.w	r3, r0, r8
 8000cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	46a2      	mov	sl, r4
 8000cb8:	9304      	str	r3, [sp, #16]
 8000cba:	e7d2      	b.n	8000c62 <_vfiprintf_r+0xc6>
 8000cbc:	9b03      	ldr	r3, [sp, #12]
 8000cbe:	1d19      	adds	r1, r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	9103      	str	r1, [sp, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	bfbb      	ittet	lt
 8000cc8:	425b      	neglt	r3, r3
 8000cca:	f042 0202 	orrlt.w	r2, r2, #2
 8000cce:	9307      	strge	r3, [sp, #28]
 8000cd0:	9307      	strlt	r3, [sp, #28]
 8000cd2:	bfb8      	it	lt
 8000cd4:	9204      	strlt	r2, [sp, #16]
 8000cd6:	7823      	ldrb	r3, [r4, #0]
 8000cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cda:	d10c      	bne.n	8000cf6 <_vfiprintf_r+0x15a>
 8000cdc:	7863      	ldrb	r3, [r4, #1]
 8000cde:	2b2a      	cmp	r3, #42	; 0x2a
 8000ce0:	d134      	bne.n	8000d4c <_vfiprintf_r+0x1b0>
 8000ce2:	9b03      	ldr	r3, [sp, #12]
 8000ce4:	3402      	adds	r4, #2
 8000ce6:	1d1a      	adds	r2, r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	9203      	str	r2, [sp, #12]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	bfb8      	it	lt
 8000cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cf4:	9305      	str	r3, [sp, #20]
 8000cf6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000dc0 <_vfiprintf_r+0x224>
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	4650      	mov	r0, sl
 8000cfe:	7821      	ldrb	r1, [r4, #0]
 8000d00:	f000 fb38 	bl	8001374 <memchr>
 8000d04:	b138      	cbz	r0, 8000d16 <_vfiprintf_r+0x17a>
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	9b04      	ldr	r3, [sp, #16]
 8000d0a:	eba0 000a 	sub.w	r0, r0, sl
 8000d0e:	4082      	lsls	r2, r0
 8000d10:	4313      	orrs	r3, r2
 8000d12:	3401      	adds	r4, #1
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d1a:	2206      	movs	r2, #6
 8000d1c:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <_vfiprintf_r+0x228>)
 8000d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d22:	f000 fb27 	bl	8001374 <memchr>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d03f      	beq.n	8000daa <_vfiprintf_r+0x20e>
 8000d2a:	4b27      	ldr	r3, [pc, #156]	; (8000dc8 <_vfiprintf_r+0x22c>)
 8000d2c:	bb1b      	cbnz	r3, 8000d76 <_vfiprintf_r+0x1da>
 8000d2e:	9b03      	ldr	r3, [sp, #12]
 8000d30:	3307      	adds	r3, #7
 8000d32:	f023 0307 	bic.w	r3, r3, #7
 8000d36:	3308      	adds	r3, #8
 8000d38:	9303      	str	r3, [sp, #12]
 8000d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d3c:	443b      	add	r3, r7
 8000d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d40:	e768      	b.n	8000c14 <_vfiprintf_r+0x78>
 8000d42:	460c      	mov	r4, r1
 8000d44:	2001      	movs	r0, #1
 8000d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d4a:	e7a6      	b.n	8000c9a <_vfiprintf_r+0xfe>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f04f 0c0a 	mov.w	ip, #10
 8000d52:	4619      	mov	r1, r3
 8000d54:	3401      	adds	r4, #1
 8000d56:	9305      	str	r3, [sp, #20]
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d5e:	3a30      	subs	r2, #48	; 0x30
 8000d60:	2a09      	cmp	r2, #9
 8000d62:	d903      	bls.n	8000d6c <_vfiprintf_r+0x1d0>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0c6      	beq.n	8000cf6 <_vfiprintf_r+0x15a>
 8000d68:	9105      	str	r1, [sp, #20]
 8000d6a:	e7c4      	b.n	8000cf6 <_vfiprintf_r+0x15a>
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	2301      	movs	r3, #1
 8000d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d74:	e7f0      	b.n	8000d58 <_vfiprintf_r+0x1bc>
 8000d76:	ab03      	add	r3, sp, #12
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	462a      	mov	r2, r5
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_vfiprintf_r+0x230>)
 8000d80:	a904      	add	r1, sp, #16
 8000d82:	f3af 8000 	nop.w
 8000d86:	4607      	mov	r7, r0
 8000d88:	1c78      	adds	r0, r7, #1
 8000d8a:	d1d6      	bne.n	8000d3a <_vfiprintf_r+0x19e>
 8000d8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d8e:	07d9      	lsls	r1, r3, #31
 8000d90:	d405      	bmi.n	8000d9e <_vfiprintf_r+0x202>
 8000d92:	89ab      	ldrh	r3, [r5, #12]
 8000d94:	059a      	lsls	r2, r3, #22
 8000d96:	d402      	bmi.n	8000d9e <_vfiprintf_r+0x202>
 8000d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d9a:	f7ff fde2 	bl	8000962 <__retarget_lock_release_recursive>
 8000d9e:	89ab      	ldrh	r3, [r5, #12]
 8000da0:	065b      	lsls	r3, r3, #25
 8000da2:	f53f af1d 	bmi.w	8000be0 <_vfiprintf_r+0x44>
 8000da6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000da8:	e71c      	b.n	8000be4 <_vfiprintf_r+0x48>
 8000daa:	ab03      	add	r3, sp, #12
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	462a      	mov	r2, r5
 8000db0:	4630      	mov	r0, r6
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <_vfiprintf_r+0x230>)
 8000db4:	a904      	add	r1, sp, #16
 8000db6:	f000 f87d 	bl	8000eb4 <_printf_i>
 8000dba:	e7e4      	b.n	8000d86 <_vfiprintf_r+0x1ea>
 8000dbc:	08001422 	.word	0x08001422
 8000dc0:	08001428 	.word	0x08001428
 8000dc4:	0800142c 	.word	0x0800142c
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	08000b77 	.word	0x08000b77

08000dd0 <_printf_common>:
 8000dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd4:	4616      	mov	r6, r2
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	688a      	ldr	r2, [r1, #8]
 8000dda:	690b      	ldr	r3, [r1, #16]
 8000ddc:	4607      	mov	r7, r0
 8000dde:	4293      	cmp	r3, r2
 8000de0:	bfb8      	it	lt
 8000de2:	4613      	movlt	r3, r2
 8000de4:	6033      	str	r3, [r6, #0]
 8000de6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dea:	460c      	mov	r4, r1
 8000dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000df0:	b10a      	cbz	r2, 8000df6 <_printf_common+0x26>
 8000df2:	3301      	adds	r3, #1
 8000df4:	6033      	str	r3, [r6, #0]
 8000df6:	6823      	ldr	r3, [r4, #0]
 8000df8:	0699      	lsls	r1, r3, #26
 8000dfa:	bf42      	ittt	mi
 8000dfc:	6833      	ldrmi	r3, [r6, #0]
 8000dfe:	3302      	addmi	r3, #2
 8000e00:	6033      	strmi	r3, [r6, #0]
 8000e02:	6825      	ldr	r5, [r4, #0]
 8000e04:	f015 0506 	ands.w	r5, r5, #6
 8000e08:	d106      	bne.n	8000e18 <_printf_common+0x48>
 8000e0a:	f104 0a19 	add.w	sl, r4, #25
 8000e0e:	68e3      	ldr	r3, [r4, #12]
 8000e10:	6832      	ldr	r2, [r6, #0]
 8000e12:	1a9b      	subs	r3, r3, r2
 8000e14:	42ab      	cmp	r3, r5
 8000e16:	dc2b      	bgt.n	8000e70 <_printf_common+0xa0>
 8000e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e1c:	1e13      	subs	r3, r2, #0
 8000e1e:	6822      	ldr	r2, [r4, #0]
 8000e20:	bf18      	it	ne
 8000e22:	2301      	movne	r3, #1
 8000e24:	0692      	lsls	r2, r2, #26
 8000e26:	d430      	bmi.n	8000e8a <_printf_common+0xba>
 8000e28:	4649      	mov	r1, r9
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e30:	47c0      	blx	r8
 8000e32:	3001      	adds	r0, #1
 8000e34:	d023      	beq.n	8000e7e <_printf_common+0xae>
 8000e36:	6823      	ldr	r3, [r4, #0]
 8000e38:	6922      	ldr	r2, [r4, #16]
 8000e3a:	f003 0306 	and.w	r3, r3, #6
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	bf14      	ite	ne
 8000e42:	2500      	movne	r5, #0
 8000e44:	6833      	ldreq	r3, [r6, #0]
 8000e46:	f04f 0600 	mov.w	r6, #0
 8000e4a:	bf08      	it	eq
 8000e4c:	68e5      	ldreq	r5, [r4, #12]
 8000e4e:	f104 041a 	add.w	r4, r4, #26
 8000e52:	bf08      	it	eq
 8000e54:	1aed      	subeq	r5, r5, r3
 8000e56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000e5a:	bf08      	it	eq
 8000e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e60:	4293      	cmp	r3, r2
 8000e62:	bfc4      	itt	gt
 8000e64:	1a9b      	subgt	r3, r3, r2
 8000e66:	18ed      	addgt	r5, r5, r3
 8000e68:	42b5      	cmp	r5, r6
 8000e6a:	d11a      	bne.n	8000ea2 <_printf_common+0xd2>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e008      	b.n	8000e82 <_printf_common+0xb2>
 8000e70:	2301      	movs	r3, #1
 8000e72:	4652      	mov	r2, sl
 8000e74:	4649      	mov	r1, r9
 8000e76:	4638      	mov	r0, r7
 8000e78:	47c0      	blx	r8
 8000e7a:	3001      	adds	r0, #1
 8000e7c:	d103      	bne.n	8000e86 <_printf_common+0xb6>
 8000e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	3501      	adds	r5, #1
 8000e88:	e7c1      	b.n	8000e0e <_printf_common+0x3e>
 8000e8a:	2030      	movs	r0, #48	; 0x30
 8000e8c:	18e1      	adds	r1, r4, r3
 8000e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e98:	4422      	add	r2, r4
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ea0:	e7c2      	b.n	8000e28 <_printf_common+0x58>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	4622      	mov	r2, r4
 8000ea6:	4649      	mov	r1, r9
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	47c0      	blx	r8
 8000eac:	3001      	adds	r0, #1
 8000eae:	d0e6      	beq.n	8000e7e <_printf_common+0xae>
 8000eb0:	3601      	adds	r6, #1
 8000eb2:	e7d9      	b.n	8000e68 <_printf_common+0x98>

08000eb4 <_printf_i>:
 8000eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eb8:	7e0f      	ldrb	r7, [r1, #24]
 8000eba:	4691      	mov	r9, r2
 8000ebc:	2f78      	cmp	r7, #120	; 0x78
 8000ebe:	4680      	mov	r8, r0
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000eca:	d807      	bhi.n	8000edc <_printf_i+0x28>
 8000ecc:	2f62      	cmp	r7, #98	; 0x62
 8000ece:	d80a      	bhi.n	8000ee6 <_printf_i+0x32>
 8000ed0:	2f00      	cmp	r7, #0
 8000ed2:	f000 80d5 	beq.w	8001080 <_printf_i+0x1cc>
 8000ed6:	2f58      	cmp	r7, #88	; 0x58
 8000ed8:	f000 80c1 	beq.w	800105e <_printf_i+0x1aa>
 8000edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ee4:	e03a      	b.n	8000f5c <_printf_i+0xa8>
 8000ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000eea:	2b15      	cmp	r3, #21
 8000eec:	d8f6      	bhi.n	8000edc <_printf_i+0x28>
 8000eee:	a101      	add	r1, pc, #4	; (adr r1, 8000ef4 <_printf_i+0x40>)
 8000ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ef4:	08000f4d 	.word	0x08000f4d
 8000ef8:	08000f61 	.word	0x08000f61
 8000efc:	08000edd 	.word	0x08000edd
 8000f00:	08000edd 	.word	0x08000edd
 8000f04:	08000edd 	.word	0x08000edd
 8000f08:	08000edd 	.word	0x08000edd
 8000f0c:	08000f61 	.word	0x08000f61
 8000f10:	08000edd 	.word	0x08000edd
 8000f14:	08000edd 	.word	0x08000edd
 8000f18:	08000edd 	.word	0x08000edd
 8000f1c:	08000edd 	.word	0x08000edd
 8000f20:	08001067 	.word	0x08001067
 8000f24:	08000f8d 	.word	0x08000f8d
 8000f28:	08001021 	.word	0x08001021
 8000f2c:	08000edd 	.word	0x08000edd
 8000f30:	08000edd 	.word	0x08000edd
 8000f34:	08001089 	.word	0x08001089
 8000f38:	08000edd 	.word	0x08000edd
 8000f3c:	08000f8d 	.word	0x08000f8d
 8000f40:	08000edd 	.word	0x08000edd
 8000f44:	08000edd 	.word	0x08000edd
 8000f48:	08001029 	.word	0x08001029
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	1d1a      	adds	r2, r3, #4
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	602a      	str	r2, [r5, #0]
 8000f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e0a0      	b.n	80010a2 <_printf_i+0x1ee>
 8000f60:	6820      	ldr	r0, [r4, #0]
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	0607      	lsls	r7, r0, #24
 8000f66:	f103 0104 	add.w	r1, r3, #4
 8000f6a:	6029      	str	r1, [r5, #0]
 8000f6c:	d501      	bpl.n	8000f72 <_printf_i+0xbe>
 8000f6e:	681e      	ldr	r6, [r3, #0]
 8000f70:	e003      	b.n	8000f7a <_printf_i+0xc6>
 8000f72:	0646      	lsls	r6, r0, #25
 8000f74:	d5fb      	bpl.n	8000f6e <_printf_i+0xba>
 8000f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	da03      	bge.n	8000f86 <_printf_i+0xd2>
 8000f7e:	232d      	movs	r3, #45	; 0x2d
 8000f80:	4276      	negs	r6, r6
 8000f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f86:	230a      	movs	r3, #10
 8000f88:	4859      	ldr	r0, [pc, #356]	; (80010f0 <_printf_i+0x23c>)
 8000f8a:	e012      	b.n	8000fb2 <_printf_i+0xfe>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	6820      	ldr	r0, [r4, #0]
 8000f90:	1d19      	adds	r1, r3, #4
 8000f92:	6029      	str	r1, [r5, #0]
 8000f94:	0605      	lsls	r5, r0, #24
 8000f96:	d501      	bpl.n	8000f9c <_printf_i+0xe8>
 8000f98:	681e      	ldr	r6, [r3, #0]
 8000f9a:	e002      	b.n	8000fa2 <_printf_i+0xee>
 8000f9c:	0641      	lsls	r1, r0, #25
 8000f9e:	d5fb      	bpl.n	8000f98 <_printf_i+0xe4>
 8000fa0:	881e      	ldrh	r6, [r3, #0]
 8000fa2:	2f6f      	cmp	r7, #111	; 0x6f
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2308      	moveq	r3, #8
 8000fa8:	230a      	movne	r3, #10
 8000faa:	4851      	ldr	r0, [pc, #324]	; (80010f0 <_printf_i+0x23c>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fb2:	6865      	ldr	r5, [r4, #4]
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	bfa8      	it	ge
 8000fb8:	6821      	ldrge	r1, [r4, #0]
 8000fba:	60a5      	str	r5, [r4, #8]
 8000fbc:	bfa4      	itt	ge
 8000fbe:	f021 0104 	bicge.w	r1, r1, #4
 8000fc2:	6021      	strge	r1, [r4, #0]
 8000fc4:	b90e      	cbnz	r6, 8000fca <_printf_i+0x116>
 8000fc6:	2d00      	cmp	r5, #0
 8000fc8:	d04b      	beq.n	8001062 <_printf_i+0x1ae>
 8000fca:	4615      	mov	r5, r2
 8000fcc:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fd0:	fb03 6711 	mls	r7, r3, r1, r6
 8000fd4:	5dc7      	ldrb	r7, [r0, r7]
 8000fd6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fda:	4637      	mov	r7, r6
 8000fdc:	42bb      	cmp	r3, r7
 8000fde:	460e      	mov	r6, r1
 8000fe0:	d9f4      	bls.n	8000fcc <_printf_i+0x118>
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d10b      	bne.n	8000ffe <_printf_i+0x14a>
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	07de      	lsls	r6, r3, #31
 8000fea:	d508      	bpl.n	8000ffe <_printf_i+0x14a>
 8000fec:	6923      	ldr	r3, [r4, #16]
 8000fee:	6861      	ldr	r1, [r4, #4]
 8000ff0:	4299      	cmp	r1, r3
 8000ff2:	bfde      	ittt	le
 8000ff4:	2330      	movle	r3, #48	; 0x30
 8000ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ffa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ffe:	1b52      	subs	r2, r2, r5
 8001000:	6122      	str	r2, [r4, #16]
 8001002:	464b      	mov	r3, r9
 8001004:	4621      	mov	r1, r4
 8001006:	4640      	mov	r0, r8
 8001008:	f8cd a000 	str.w	sl, [sp]
 800100c:	aa03      	add	r2, sp, #12
 800100e:	f7ff fedf 	bl	8000dd0 <_printf_common>
 8001012:	3001      	adds	r0, #1
 8001014:	d14a      	bne.n	80010ac <_printf_i+0x1f8>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	b004      	add	sp, #16
 800101c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	f043 0320 	orr.w	r3, r3, #32
 8001026:	6023      	str	r3, [r4, #0]
 8001028:	2778      	movs	r7, #120	; 0x78
 800102a:	4832      	ldr	r0, [pc, #200]	; (80010f4 <_printf_i+0x240>)
 800102c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001030:	6823      	ldr	r3, [r4, #0]
 8001032:	6829      	ldr	r1, [r5, #0]
 8001034:	061f      	lsls	r7, r3, #24
 8001036:	f851 6b04 	ldr.w	r6, [r1], #4
 800103a:	d402      	bmi.n	8001042 <_printf_i+0x18e>
 800103c:	065f      	lsls	r7, r3, #25
 800103e:	bf48      	it	mi
 8001040:	b2b6      	uxthmi	r6, r6
 8001042:	07df      	lsls	r7, r3, #31
 8001044:	bf48      	it	mi
 8001046:	f043 0320 	orrmi.w	r3, r3, #32
 800104a:	6029      	str	r1, [r5, #0]
 800104c:	bf48      	it	mi
 800104e:	6023      	strmi	r3, [r4, #0]
 8001050:	b91e      	cbnz	r6, 800105a <_printf_i+0x1a6>
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	f023 0320 	bic.w	r3, r3, #32
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	2310      	movs	r3, #16
 800105c:	e7a6      	b.n	8000fac <_printf_i+0xf8>
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <_printf_i+0x23c>)
 8001060:	e7e4      	b.n	800102c <_printf_i+0x178>
 8001062:	4615      	mov	r5, r2
 8001064:	e7bd      	b.n	8000fe2 <_printf_i+0x12e>
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	6826      	ldr	r6, [r4, #0]
 800106a:	1d18      	adds	r0, r3, #4
 800106c:	6961      	ldr	r1, [r4, #20]
 800106e:	6028      	str	r0, [r5, #0]
 8001070:	0635      	lsls	r5, r6, #24
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	d501      	bpl.n	800107a <_printf_i+0x1c6>
 8001076:	6019      	str	r1, [r3, #0]
 8001078:	e002      	b.n	8001080 <_printf_i+0x1cc>
 800107a:	0670      	lsls	r0, r6, #25
 800107c:	d5fb      	bpl.n	8001076 <_printf_i+0x1c2>
 800107e:	8019      	strh	r1, [r3, #0]
 8001080:	2300      	movs	r3, #0
 8001082:	4615      	mov	r5, r2
 8001084:	6123      	str	r3, [r4, #16]
 8001086:	e7bc      	b.n	8001002 <_printf_i+0x14e>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	2100      	movs	r1, #0
 800108c:	1d1a      	adds	r2, r3, #4
 800108e:	602a      	str	r2, [r5, #0]
 8001090:	681d      	ldr	r5, [r3, #0]
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	4628      	mov	r0, r5
 8001096:	f000 f96d 	bl	8001374 <memchr>
 800109a:	b108      	cbz	r0, 80010a0 <_printf_i+0x1ec>
 800109c:	1b40      	subs	r0, r0, r5
 800109e:	6060      	str	r0, [r4, #4]
 80010a0:	6863      	ldr	r3, [r4, #4]
 80010a2:	6123      	str	r3, [r4, #16]
 80010a4:	2300      	movs	r3, #0
 80010a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010aa:	e7aa      	b.n	8001002 <_printf_i+0x14e>
 80010ac:	462a      	mov	r2, r5
 80010ae:	4649      	mov	r1, r9
 80010b0:	4640      	mov	r0, r8
 80010b2:	6923      	ldr	r3, [r4, #16]
 80010b4:	47d0      	blx	sl
 80010b6:	3001      	adds	r0, #1
 80010b8:	d0ad      	beq.n	8001016 <_printf_i+0x162>
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	079b      	lsls	r3, r3, #30
 80010be:	d413      	bmi.n	80010e8 <_printf_i+0x234>
 80010c0:	68e0      	ldr	r0, [r4, #12]
 80010c2:	9b03      	ldr	r3, [sp, #12]
 80010c4:	4298      	cmp	r0, r3
 80010c6:	bfb8      	it	lt
 80010c8:	4618      	movlt	r0, r3
 80010ca:	e7a6      	b.n	800101a <_printf_i+0x166>
 80010cc:	2301      	movs	r3, #1
 80010ce:	4632      	mov	r2, r6
 80010d0:	4649      	mov	r1, r9
 80010d2:	4640      	mov	r0, r8
 80010d4:	47d0      	blx	sl
 80010d6:	3001      	adds	r0, #1
 80010d8:	d09d      	beq.n	8001016 <_printf_i+0x162>
 80010da:	3501      	adds	r5, #1
 80010dc:	68e3      	ldr	r3, [r4, #12]
 80010de:	9903      	ldr	r1, [sp, #12]
 80010e0:	1a5b      	subs	r3, r3, r1
 80010e2:	42ab      	cmp	r3, r5
 80010e4:	dcf2      	bgt.n	80010cc <_printf_i+0x218>
 80010e6:	e7eb      	b.n	80010c0 <_printf_i+0x20c>
 80010e8:	2500      	movs	r5, #0
 80010ea:	f104 0619 	add.w	r6, r4, #25
 80010ee:	e7f5      	b.n	80010dc <_printf_i+0x228>
 80010f0:	08001433 	.word	0x08001433
 80010f4:	08001444 	.word	0x08001444

080010f8 <__sflush_r>:
 80010f8:	898a      	ldrh	r2, [r1, #12]
 80010fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fc:	4605      	mov	r5, r0
 80010fe:	0710      	lsls	r0, r2, #28
 8001100:	460c      	mov	r4, r1
 8001102:	d457      	bmi.n	80011b4 <__sflush_r+0xbc>
 8001104:	684b      	ldr	r3, [r1, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dc04      	bgt.n	8001114 <__sflush_r+0x1c>
 800110a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	dc01      	bgt.n	8001114 <__sflush_r+0x1c>
 8001110:	2000      	movs	r0, #0
 8001112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001114:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001116:	2e00      	cmp	r6, #0
 8001118:	d0fa      	beq.n	8001110 <__sflush_r+0x18>
 800111a:	2300      	movs	r3, #0
 800111c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001120:	682f      	ldr	r7, [r5, #0]
 8001122:	6a21      	ldr	r1, [r4, #32]
 8001124:	602b      	str	r3, [r5, #0]
 8001126:	d032      	beq.n	800118e <__sflush_r+0x96>
 8001128:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800112a:	89a3      	ldrh	r3, [r4, #12]
 800112c:	075a      	lsls	r2, r3, #29
 800112e:	d505      	bpl.n	800113c <__sflush_r+0x44>
 8001130:	6863      	ldr	r3, [r4, #4]
 8001132:	1ac0      	subs	r0, r0, r3
 8001134:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001136:	b10b      	cbz	r3, 800113c <__sflush_r+0x44>
 8001138:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800113a:	1ac0      	subs	r0, r0, r3
 800113c:	2300      	movs	r3, #0
 800113e:	4602      	mov	r2, r0
 8001140:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001142:	4628      	mov	r0, r5
 8001144:	6a21      	ldr	r1, [r4, #32]
 8001146:	47b0      	blx	r6
 8001148:	1c43      	adds	r3, r0, #1
 800114a:	89a3      	ldrh	r3, [r4, #12]
 800114c:	d106      	bne.n	800115c <__sflush_r+0x64>
 800114e:	6829      	ldr	r1, [r5, #0]
 8001150:	291d      	cmp	r1, #29
 8001152:	d82b      	bhi.n	80011ac <__sflush_r+0xb4>
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <__sflush_r+0x100>)
 8001156:	410a      	asrs	r2, r1
 8001158:	07d6      	lsls	r6, r2, #31
 800115a:	d427      	bmi.n	80011ac <__sflush_r+0xb4>
 800115c:	2200      	movs	r2, #0
 800115e:	6062      	str	r2, [r4, #4]
 8001160:	6922      	ldr	r2, [r4, #16]
 8001162:	04d9      	lsls	r1, r3, #19
 8001164:	6022      	str	r2, [r4, #0]
 8001166:	d504      	bpl.n	8001172 <__sflush_r+0x7a>
 8001168:	1c42      	adds	r2, r0, #1
 800116a:	d101      	bne.n	8001170 <__sflush_r+0x78>
 800116c:	682b      	ldr	r3, [r5, #0]
 800116e:	b903      	cbnz	r3, 8001172 <__sflush_r+0x7a>
 8001170:	6560      	str	r0, [r4, #84]	; 0x54
 8001172:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001174:	602f      	str	r7, [r5, #0]
 8001176:	2900      	cmp	r1, #0
 8001178:	d0ca      	beq.n	8001110 <__sflush_r+0x18>
 800117a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800117e:	4299      	cmp	r1, r3
 8001180:	d002      	beq.n	8001188 <__sflush_r+0x90>
 8001182:	4628      	mov	r0, r5
 8001184:	f7ff fbee 	bl	8000964 <_free_r>
 8001188:	2000      	movs	r0, #0
 800118a:	6360      	str	r0, [r4, #52]	; 0x34
 800118c:	e7c1      	b.n	8001112 <__sflush_r+0x1a>
 800118e:	2301      	movs	r3, #1
 8001190:	4628      	mov	r0, r5
 8001192:	47b0      	blx	r6
 8001194:	1c41      	adds	r1, r0, #1
 8001196:	d1c8      	bne.n	800112a <__sflush_r+0x32>
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0c5      	beq.n	800112a <__sflush_r+0x32>
 800119e:	2b1d      	cmp	r3, #29
 80011a0:	d001      	beq.n	80011a6 <__sflush_r+0xae>
 80011a2:	2b16      	cmp	r3, #22
 80011a4:	d101      	bne.n	80011aa <__sflush_r+0xb2>
 80011a6:	602f      	str	r7, [r5, #0]
 80011a8:	e7b2      	b.n	8001110 <__sflush_r+0x18>
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	e7ae      	b.n	8001112 <__sflush_r+0x1a>
 80011b4:	690f      	ldr	r7, [r1, #16]
 80011b6:	2f00      	cmp	r7, #0
 80011b8:	d0aa      	beq.n	8001110 <__sflush_r+0x18>
 80011ba:	0793      	lsls	r3, r2, #30
 80011bc:	bf18      	it	ne
 80011be:	2300      	movne	r3, #0
 80011c0:	680e      	ldr	r6, [r1, #0]
 80011c2:	bf08      	it	eq
 80011c4:	694b      	ldreq	r3, [r1, #20]
 80011c6:	1bf6      	subs	r6, r6, r7
 80011c8:	600f      	str	r7, [r1, #0]
 80011ca:	608b      	str	r3, [r1, #8]
 80011cc:	2e00      	cmp	r6, #0
 80011ce:	dd9f      	ble.n	8001110 <__sflush_r+0x18>
 80011d0:	4633      	mov	r3, r6
 80011d2:	463a      	mov	r2, r7
 80011d4:	4628      	mov	r0, r5
 80011d6:	6a21      	ldr	r1, [r4, #32]
 80011d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80011dc:	47e0      	blx	ip
 80011de:	2800      	cmp	r0, #0
 80011e0:	dc06      	bgt.n	80011f0 <__sflush_r+0xf8>
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	81a3      	strh	r3, [r4, #12]
 80011ee:	e790      	b.n	8001112 <__sflush_r+0x1a>
 80011f0:	4407      	add	r7, r0
 80011f2:	1a36      	subs	r6, r6, r0
 80011f4:	e7ea      	b.n	80011cc <__sflush_r+0xd4>
 80011f6:	bf00      	nop
 80011f8:	dfbffffe 	.word	0xdfbffffe

080011fc <_fflush_r>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	690b      	ldr	r3, [r1, #16]
 8001200:	4605      	mov	r5, r0
 8001202:	460c      	mov	r4, r1
 8001204:	b913      	cbnz	r3, 800120c <_fflush_r+0x10>
 8001206:	2500      	movs	r5, #0
 8001208:	4628      	mov	r0, r5
 800120a:	bd38      	pop	{r3, r4, r5, pc}
 800120c:	b118      	cbz	r0, 8001216 <_fflush_r+0x1a>
 800120e:	6a03      	ldr	r3, [r0, #32]
 8001210:	b90b      	cbnz	r3, 8001216 <_fflush_r+0x1a>
 8001212:	f7ff f9b1 	bl	8000578 <__sinit>
 8001216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f3      	beq.n	8001206 <_fflush_r+0xa>
 800121e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001220:	07d0      	lsls	r0, r2, #31
 8001222:	d404      	bmi.n	800122e <_fflush_r+0x32>
 8001224:	0599      	lsls	r1, r3, #22
 8001226:	d402      	bmi.n	800122e <_fflush_r+0x32>
 8001228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800122a:	f7ff fb99 	bl	8000960 <__retarget_lock_acquire_recursive>
 800122e:	4628      	mov	r0, r5
 8001230:	4621      	mov	r1, r4
 8001232:	f7ff ff61 	bl	80010f8 <__sflush_r>
 8001236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001238:	4605      	mov	r5, r0
 800123a:	07da      	lsls	r2, r3, #31
 800123c:	d4e4      	bmi.n	8001208 <_fflush_r+0xc>
 800123e:	89a3      	ldrh	r3, [r4, #12]
 8001240:	059b      	lsls	r3, r3, #22
 8001242:	d4e1      	bmi.n	8001208 <_fflush_r+0xc>
 8001244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001246:	f7ff fb8c 	bl	8000962 <__retarget_lock_release_recursive>
 800124a:	e7dd      	b.n	8001208 <_fflush_r+0xc>

0800124c <__swhatbuf_r>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	460c      	mov	r4, r1
 8001250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001254:	4615      	mov	r5, r2
 8001256:	2900      	cmp	r1, #0
 8001258:	461e      	mov	r6, r3
 800125a:	b096      	sub	sp, #88	; 0x58
 800125c:	da0c      	bge.n	8001278 <__swhatbuf_r+0x2c>
 800125e:	89a3      	ldrh	r3, [r4, #12]
 8001260:	2100      	movs	r1, #0
 8001262:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001266:	bf0c      	ite	eq
 8001268:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800126c:	2340      	movne	r3, #64	; 0x40
 800126e:	2000      	movs	r0, #0
 8001270:	6031      	str	r1, [r6, #0]
 8001272:	602b      	str	r3, [r5, #0]
 8001274:	b016      	add	sp, #88	; 0x58
 8001276:	bd70      	pop	{r4, r5, r6, pc}
 8001278:	466a      	mov	r2, sp
 800127a:	f000 f849 	bl	8001310 <_fstat_r>
 800127e:	2800      	cmp	r0, #0
 8001280:	dbed      	blt.n	800125e <__swhatbuf_r+0x12>
 8001282:	9901      	ldr	r1, [sp, #4]
 8001284:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001288:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800128c:	4259      	negs	r1, r3
 800128e:	4159      	adcs	r1, r3
 8001290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001294:	e7eb      	b.n	800126e <__swhatbuf_r+0x22>

08001296 <__smakebuf_r>:
 8001296:	898b      	ldrh	r3, [r1, #12]
 8001298:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800129a:	079d      	lsls	r5, r3, #30
 800129c:	4606      	mov	r6, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	d507      	bpl.n	80012b2 <__smakebuf_r+0x1c>
 80012a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	6123      	str	r3, [r4, #16]
 80012aa:	2301      	movs	r3, #1
 80012ac:	6163      	str	r3, [r4, #20]
 80012ae:	b002      	add	sp, #8
 80012b0:	bd70      	pop	{r4, r5, r6, pc}
 80012b2:	466a      	mov	r2, sp
 80012b4:	ab01      	add	r3, sp, #4
 80012b6:	f7ff ffc9 	bl	800124c <__swhatbuf_r>
 80012ba:	9900      	ldr	r1, [sp, #0]
 80012bc:	4605      	mov	r5, r0
 80012be:	4630      	mov	r0, r6
 80012c0:	f7ff fbb8 	bl	8000a34 <_malloc_r>
 80012c4:	b948      	cbnz	r0, 80012da <__smakebuf_r+0x44>
 80012c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ca:	059a      	lsls	r2, r3, #22
 80012cc:	d4ef      	bmi.n	80012ae <__smakebuf_r+0x18>
 80012ce:	f023 0303 	bic.w	r3, r3, #3
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	81a3      	strh	r3, [r4, #12]
 80012d8:	e7e3      	b.n	80012a2 <__smakebuf_r+0xc>
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	6020      	str	r0, [r4, #0]
 80012de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e2:	81a3      	strh	r3, [r4, #12]
 80012e4:	9b00      	ldr	r3, [sp, #0]
 80012e6:	6120      	str	r0, [r4, #16]
 80012e8:	6163      	str	r3, [r4, #20]
 80012ea:	9b01      	ldr	r3, [sp, #4]
 80012ec:	b15b      	cbz	r3, 8001306 <__smakebuf_r+0x70>
 80012ee:	4630      	mov	r0, r6
 80012f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012f4:	f000 f81e 	bl	8001334 <_isatty_r>
 80012f8:	b128      	cbz	r0, 8001306 <__smakebuf_r+0x70>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	f023 0303 	bic.w	r3, r3, #3
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	81a3      	strh	r3, [r4, #12]
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	431d      	orrs	r5, r3
 800130a:	81a5      	strh	r5, [r4, #12]
 800130c:	e7cf      	b.n	80012ae <__smakebuf_r+0x18>
	...

08001310 <_fstat_r>:
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	2300      	movs	r3, #0
 8001314:	4d06      	ldr	r5, [pc, #24]	; (8001330 <_fstat_r+0x20>)
 8001316:	4604      	mov	r4, r0
 8001318:	4608      	mov	r0, r1
 800131a:	4611      	mov	r1, r2
 800131c:	602b      	str	r3, [r5, #0]
 800131e:	f7ff f82b 	bl	8000378 <_fstat>
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	d102      	bne.n	800132c <_fstat_r+0x1c>
 8001326:	682b      	ldr	r3, [r5, #0]
 8001328:	b103      	cbz	r3, 800132c <_fstat_r+0x1c>
 800132a:	6023      	str	r3, [r4, #0]
 800132c:	bd38      	pop	{r3, r4, r5, pc}
 800132e:	bf00      	nop
 8001330:	200001b8 	.word	0x200001b8

08001334 <_isatty_r>:
 8001334:	b538      	push	{r3, r4, r5, lr}
 8001336:	2300      	movs	r3, #0
 8001338:	4d05      	ldr	r5, [pc, #20]	; (8001350 <_isatty_r+0x1c>)
 800133a:	4604      	mov	r4, r0
 800133c:	4608      	mov	r0, r1
 800133e:	602b      	str	r3, [r5, #0]
 8001340:	f7ff f829 	bl	8000396 <_isatty>
 8001344:	1c43      	adds	r3, r0, #1
 8001346:	d102      	bne.n	800134e <_isatty_r+0x1a>
 8001348:	682b      	ldr	r3, [r5, #0]
 800134a:	b103      	cbz	r3, 800134e <_isatty_r+0x1a>
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	bd38      	pop	{r3, r4, r5, pc}
 8001350:	200001b8 	.word	0x200001b8

08001354 <_sbrk_r>:
 8001354:	b538      	push	{r3, r4, r5, lr}
 8001356:	2300      	movs	r3, #0
 8001358:	4d05      	ldr	r5, [pc, #20]	; (8001370 <_sbrk_r+0x1c>)
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	602b      	str	r3, [r5, #0]
 8001360:	f7ff f830 	bl	80003c4 <_sbrk>
 8001364:	1c43      	adds	r3, r0, #1
 8001366:	d102      	bne.n	800136e <_sbrk_r+0x1a>
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	b103      	cbz	r3, 800136e <_sbrk_r+0x1a>
 800136c:	6023      	str	r3, [r4, #0]
 800136e:	bd38      	pop	{r3, r4, r5, pc}
 8001370:	200001b8 	.word	0x200001b8

08001374 <memchr>:
 8001374:	4603      	mov	r3, r0
 8001376:	b510      	push	{r4, lr}
 8001378:	b2c9      	uxtb	r1, r1
 800137a:	4402      	add	r2, r0
 800137c:	4293      	cmp	r3, r2
 800137e:	4618      	mov	r0, r3
 8001380:	d101      	bne.n	8001386 <memchr+0x12>
 8001382:	2000      	movs	r0, #0
 8001384:	e003      	b.n	800138e <memchr+0x1a>
 8001386:	7804      	ldrb	r4, [r0, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	428c      	cmp	r4, r1
 800138c:	d1f6      	bne.n	800137c <memchr+0x8>
 800138e:	bd10      	pop	{r4, pc}

08001390 <_init>:
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001392:	bf00      	nop
 8001394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001396:	bc08      	pop	{r3}
 8001398:	469e      	mov	lr, r3
 800139a:	4770      	bx	lr

0800139c <_fini>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	bf00      	nop
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr
